import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.dynamicframe import DynamicFrame
from awsglue.job import Job
from pyspark.sql import SparkSession
from pyspark.sql.functions import udf
from pyspark.sql.types import StringType
from pyspark.sql.functions import lit
import time
import boto3

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

client = boto3.client('lambda', region_name='us-west-2')
current_timestamp = time.strftime("%Y-%m-%d %H:%M:%S")


										######################################
                                        ####        CONNECTION BLOCK      ####
                                        ######################################

## road_document_messages connection
docmes_DS = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "road_document_messages", transformation_ctx = "docmes_DS")
docmes_regDF = docmes_DS.toDF()
docmes_regDF = docmes_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
docmes_distDF = docmes_regDF.distinct()
docmes_dynDF = DynamicFrame.fromDF(docmes_distDF,glueContext,"nested")
										
## road_truck_actions connection
roadTA_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "road_truck_actions", transformation_ctx = "roadTA_ds")
roadTA_regDF = roadTA_ds.toDF()
roadTA_regDF = roadTA_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
roadTA_distDF = roadTA_regDF.distinct()
roadTA_dynDF = DynamicFrame.fromDF(roadTA_distDF, glueContext, "nested")

## road_truck_company_drivers connection
roadTCD_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "road_truck_company_drivers", transformation_ctx = "roadTCD_ds")
roadTCD_regDF = roadTCD_ds.toDF()
roadTCD_regDF = roadTCD_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
roadTCD_distDF = roadTCD_regDF.distinct()
roadTCD_dynDF = DynamicFrame.fromDF(roadTCD_distDF, glueContext, "nested")

## road_truck_drivers connection
roadTD_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "road_truck_drivers", transformation_ctx = "roadTD_ds")
roadTD_regDF = roadTD_ds.toDF()
roadTD_regDF = roadTD_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
roadTD_distDF = roadTD_regDF.distinct()
roadTD_dynDF = DynamicFrame.fromDF(roadTD_distDF, glueContext, "nested")

## road_truck_transactions connection
roadTT_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "road_truck_transactions", transformation_ctx = "roadTT_ds")
roadTT_regDF = roadTT_ds.toDF()
roadTT_regDF = roadTT_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
roadTT_distDF = roadTT_regDF.distinct()
roadTT_dynDF = DynamicFrame.fromDF(roadTT_distDF, glueContext, "nested")

## road_truck_transaction_stages connection
roadTTS_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "road_truck_transaction_stages", transformation_ctx = "roadTTS_ds")
roadTTS_regDF = roadTTS_ds.toDF()
roadTTS_regDF = roadTTS_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
roadTTS_distDF = roadTTS_regDF.distinct()
roadTTS_dynDF = DynamicFrame.fromDF(roadTTS_distDF, glueContext, "nested")

## road_truck_visit_details connection
roadTVD_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "road_truck_visit_details", transformation_ctx = "roadTVD_ds")
roadTVD_regDF = roadTVD_ds.toDF()
roadTVD_regDF = roadTVD_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
roadTVD_distDF = roadTVD_regDF.distinct()
roadTVD_dynDF = DynamicFrame.fromDF(roadTVD_distDF, glueContext, "nested")

## road_truck_visit_stages connection
roadTVS_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "road_truck_visit_stages", transformation_ctx = "roadTVS_ds")
roadTVS_regDF = roadTVS_ds.toDF()
roadTVS_regDF = roadTVS_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
roadTVS_distDF = roadTVS_regDF.distinct()
roadTVS_dynDF = DynamicFrame.fromDF(roadTVS_distDF, glueContext, "nested")

## road_truck_visit_stats connection
roadTVStat_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "road_truck_visit_stats", transformation_ctx = "roadTVStat_ds")
roadTVStat_regDF = roadTVStat_ds.toDF()
roadTVStat_regDF = roadTVStat_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
roadTVStat_distDF = roadTVStat_regDF.distinct()
roadTVStat_dynDF = DynamicFrame.fromDF(roadTVStat_distDF, glueContext, "nested")

## vsl_vessels connection
vslV_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "vsl_vessels", transformation_ctx = "vslV_ds")
vslV_regDF = vslV_ds.toDF()
vslV_regDF = vslV_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
vslV_distDF = vslV_regDF.distinct()
vslV_dynDF = DynamicFrame.fromDF(vslV_distDF, glueContext, "nested")

## vsl_vessel_classes connection
vslVC_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "vsl_vessel_classes", transformation_ctx = "vslVC_ds")
vslVC_regDF = vslVC_ds.toDF()
vslVC_regDF = vslVC_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
vslVC_distDF = vslVC_regDF.distinct()
vslVC_dynDF = DynamicFrame.fromDF(vslVC_distDF, glueContext, "nested")

## vsl_vessel_visit_details connection
vslVVD_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "vsl_vessel_visit_details", transformation_ctx = "vslVVD_ds")
vslVVD_regDF = vslVVD_ds.toDF()
vslVVD_regDF = vslVVD_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
vslVVD_distDF = vslVVD_regDF.distinct()
vslVVD_dynDF = DynamicFrame.fromDF(vslVVD_distDF, glueContext, "nested")

## vsl_vessel_visit_lines connection
vslVVL_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "vsl_vessel_visit_lines", transformation_ctx = "vslVVL_ds")
vslVVL_regDF = vslVVL_ds.toDF()
vslVVL_regDF = vslVVL_regDF.withColumn("sourcesystem", lit("NOLA")).withColumn("dboperationtype", lit("L")).withColumn("audtdateadded", lit(current_timestamp))
vslVVL_distDF = vslVVL_regDF.distinct()
vslVVL_dynDF = DynamicFrame.fromDF(vslVVL_distDF, glueContext, "nested")


                                        ####################################
                                        ####        MAPPING BLOCK       ####
                                        ####################################

## road_document_messages mapping
docmes_applymapping = ApplyMapping.apply(frame = docmes_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"),("gkey", "long", "gkey", "long"), ("msg_id", "string", "msg_id", "string"), ("msg_text", "string", "msg_text", "string"), ("severity", "string", "severity", "string"), ("param1", "string", "param1", "string"), ("param2", "string", "param2", "string"), ("param3", "string", "param3", "string"), ("param4", "string", "param4", "string"), ("param5", "string", "param5", "string"), ("param6", "string", "param6", "string"), ("param7", "string", "param7", "string"), ("param8", "string", "param8", "string"), ("param9", "string", "param9", "string"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("stage_id", "string", "stage_id", "string"), ("tran_gkey", "long", "tran_gkey", "long"), ("doc_gkey", "long", "doc_gkey", "long"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "docmes_applymapping")
										
## road_truck_actions mapping
roadTA_mappingcombined = ApplyMapping.apply(frame = roadTA_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("fcy_gkey", "long", "fcy_gkey", "long"), ("opr_gkey", "long", "opr_gkey", "long"), ("life_cycle_state", "string", "life_cycle_state", "string"), ("id", "string", "id", "string"), ("description", "string", "description", "string"), ("severity", "long", "severity", "long"), ("is_retry", "long", "is_retry", "long"), ("hold_truck", "long", "hold_truck", "long"), ("is_default_inbound", "long", "is_default_inbound", "long"), ("is_default_outbound", "long", "is_default_outbound", "long"), ("is_default_yard", "long", "is_default_yard", "long"), ("location", "string", "location", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "roadTA_mappingcombined")

## road_truck_company_drivers mapping
roadTCD_mappingcombined = ApplyMapping.apply(frame = roadTCD_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("expiration", "string", "expiration", "timestamp"), ("trkco_gkey", "long", "trkco_gkey", "long"), ("driver_gkey", "long", "driver_gkey", "long"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "roadTCD_mappingcombined")

## road_truck_drivers mapping
roadTD_mappingcombined = ApplyMapping.apply(frame = roadTD_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("reference_set", "long", "reference_set", "long"), ("name", "string", "name", "string"), ("card_id", "string", "card_id", "string"), ("driver_license_nbr", "string", "driver_license_nbr", "string"), ("bat_nbr", "string", "bat_nbr", "string"), ("driver_license_state", "string", "driver_license_state", "string"), ("email_address", "string", "email_address", "string"), ("driver_birth_date", "string", "driver_birth_date", "timestamp"), ("haz_lic_exp_date", "string", "haz_lic_exp_date", "timestamp"), ("driver_haz_lic_nbr", "string", "driver_haz_lic_nbr", "string"), ("is_hazard_licensed", "long", "is_hazard_licensed", "long"), ("suspended", "string", "suspended", "timestamp"), ("status", "string", "status", "string"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("life_cycle_state", "string", "life_cycle_state", "string"), ("card_expiration", "string", "card_expiration", "timestamp"), ("truck_gkey", "long", "truck_gkey", "long"), ("trkco_gkey", "long", "trkco_gkey", "long"), ("id", "string", "id", "string"), ("flex_string01", "string", "flex_string01", "string"), ("flex_string02", "string", "flex_string02", "string"), ("flex_string03", "string", "flex_string03", "string"), ("flex_string04", "string", "flex_string04", "string"), ("is_internal", "long", "is_internal", "long"), ("che_logon_id", "string", "che_logon_id", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "roadTD_mappingcombined")

## road_truck_transactions mapping
roadTT_mappingcombined = ApplyMapping.apply(frame = roadTT_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("seq_within_facility", "long", "seq_within_facility", "long"), ("nbr", "long", "nbr", "long"), ("sub_type", "string", "sub_type", "string"), ("status", "string", "status", "string"), ("stage_id", "string", "stage_id", "string"), ("next_stage_id", "string", "next_stage_id", "string"), ("trouble", "string", "trouble", "string"), ("trouble_status", "string", "trouble_status", "string"), ("had_trouble", "long", "had_trouble", "long"), ("cancel_code", "string", "cancel_code", "string"), ("notes", "string", "notes", "string"), ("handled", "string", "handled", "timestamp"), ("terminal_id", "string", "terminal_id", "string"), ("export_release_nbr", "string", "export_release_nbr", "string"), ("import_release_nbr", "string", "import_release_nbr", "string"), ("appointment_nbr", "string", "appointment_nbr", "string"), ("pin_nbr", "string", "pin_nbr", "string"), ("trkco_id", "string", "trkco_id", "string"), ("truck_tare_weight", "float", "truck_tare_weight", "float"), ("truck_safe_weight", "float", "truck_safe_weight", "float"), ("scale_weight", "float", "scale_weight", "float"), ("ctr_truck_position", "long", "ctr_truck_position", "long"), ("ctr_center_to_chassis_back_mm", "long", "ctr_center_to_chassis_back_mm", "long"), ("ctr_door_direction", "string", "ctr_door_direction", "string"), ("ctr_id", "string", "ctr_id", "string"), ("ctr_id_data_source", "string", "ctr_id_data_source", "string"), ("ctr_owner_id", "string", "ctr_owner_id", "string"), ("ctr_freight_kind", "string", "ctr_freight_kind", "string"), ("ctrunit_gkey", "long", "ctrunit_gkey", "long"), ("ctr_type_id", "string", "ctr_type_id", "string"), ("ctr_is_damaged", "long", "ctr_is_damaged", "long"), ("ctr_safe_weight", "float", "ctr_safe_weight", "float"), ("ctr_tare_weight", "float", "ctr_tare_weight", "float"), ("ctr_net_weight", "float", "ctr_net_weight", "float"), ("ctr_gross_weight", "float", "ctr_gross_weight", "float"), ("ctr_id_assigned", "string", "ctr_id_assigned", "string"), ("ctr_id_provided", "string", "ctr_id_provided", "string"), ("ctr_ticket_pos_id", "string", "ctr_ticket_pos_id", "string"), ("ctr_acc_nbr", "string", "ctr_acc_nbr", "string"), ("ctr_acc_type_id", "string", "ctr_acc_type_id", "string"), ("ctr_acc_owner_id", "string", "ctr_acc_owner_id", "string"), ("ctr_acc_fuel_level", "string", "ctr_acc_fuel_level", "string"), ("ctr_acc_tare_weight", "float", "ctr_acc_tare_weight", "float"), ("chs_id", "string", "chs_id", "string"), ("chs_id_data_source", "string", "chs_id_data_source", "string"), ("chs_owner_id", "string", "chs_owner_id", "string"), ("chs_is_owners", "long", "chs_is_owners", "long"), ("chsunit_gkey", "long", "chsunit_gkey", "long"), ("chs_type_id", "string", "chs_type_id", "string"), ("chs_is_damaged", "long", "chs_is_damaged", "long"), ("chs_tare_weight", "float", "chs_tare_weight", "float"), ("chs_safe_weight", "float", "chs_safe_weight", "float"), ("chs_license_nbr", "string", "chs_license_nbr", "string"), ("chs_id_assigned", "string", "chs_id_assigned", "string"), ("chs_acc_nbr", "string", "chs_acc_nbr", "string"), ("chs_acc_type_id", "string", "chs_acc_type_id", "string"), ("chs_acc_owner_id", "string", "chs_acc_owner_id", "string"), ("chs_acc_fuel_level", "string", "chs_acc_fuel_level", "string"), ("chs_acc_tare_weight", "float", "chs_acc_tare_weight", "float"), ("unit_id", "string", "unit_id", "string"), ("trade_id", "string", "trade_id", "string"), ("origin", "string", "origin", "string"), ("destination", "string", "destination", "string"), ("line_id", "string", "line_id", "string"), ("shipper", "string", "shipper", "string"), ("consignee", "string", "consignee", "string"), ("sc_agent", "string", "sc_agent", "string"), ("eqo_acc_type_id", "string", "eqo_acc_type_id", "string"), ("eqo_eq_iso_group", "string", "eqo_eq_iso_group", "string"), ("eqo_eq_length", "string", "eqo_eq_length", "string"), ("eqo_eq_height", "string", "eqo_eq_height", "string"), ("eqo_nbr", "string", "eqo_nbr", "string"), ("military_v_nbr", "string", "military_v_nbr", "string"), ("military_tcn", "string", "military_tcn", "string"), ("material", "string", "material", "string"), ("shand_id", "string", "shand_id", "string"), ("shand_id2", "string", "shand_id2", "string"), ("shand_id3", "string", "shand_id3", "string"), ("group_id", "string", "group_id", "string"), ("ido_id", "string", "ido_id", "string"), ("feature_gkey", "long", "feature_gkey", "long"), ("grade_gkey", "long", "grade_gkey", "long"), ("condition_gkey", "long", "condition_gkey", "long"), ("mnr_gkey", "long", "mnr_gkey", "long"), ("csc_date", "string", "csc_date", "string"), ("built_date", "string", "built_date", "timestamp"), ("bl_nbr", "string", "bl_nbr", "string"), ("bl_item_qty", "float", "bl_item_qty", "float"), ("bl_item_qty_moved", "float", "bl_item_qty_moved", "float"), ("commodity_code", "string", "commodity_code", "string"), ("commodity_description", "string", "commodity_description", "string"), ("temp_required", "float", "temp_required", "float"), ("temp_observed", "float", "temp_observed", "float"), ("temp_setting", "float", "temp_setting", "float"), ("reefer_hours", "float", "reefer_hours", "float"), ("reefer_fault_code", "string", "reefer_fault_code", "string"), ("reefer_fuel_level", "float", "reefer_fuel_level", "float"), ("vent_units", "string", "vent_units", "string"), ("vent_required_pct", "float", "vent_required_pct", "float"), ("vent_setting_pct", "float", "vent_setting_pct", "float"), ("o2_required", "float", "o2_required", "float"), ("co2_required", "float", "co2_required", "float"), ("humidity_required", "float", "humidity_required", "float"), ("is_hazard", "long", "is_hazard", "long"), ("is_hazard_checked", "long", "is_hazard_checked", "long"), ("is_placarded", "long", "is_placarded", "long"), ("is_placarded_ok", "long", "is_placarded_ok", "long"), ("is_oog", "long", "is_oog", "long"), ("oog_front", "long", "oog_front", "long"), ("oog_back", "long", "oog_back", "long"), ("oog_left", "long", "oog_left", "long"), ("oog_right", "long", "oog_right", "long"), ("oog_top", "long", "oog_top", "long"), ("seal_nbr1", "string", "seal_nbr1", "string"), ("seal_nbr2", "string", "seal_nbr2", "string"), ("seal_nbr3", "string", "seal_nbr3", "string"), ("seal_nbr4", "string", "seal_nbr4", "string"), ("is_ctr_sealed", "long", "is_ctr_sealed", "long"), ("truck_action", "long", "truck_action", "long"), ("is_xray_required", "long", "is_xray_required", "long"), ("is_confirmed", "long", "is_confirmed", "long"), ("seq_nbr", "long", "seq_nbr", "long"), ("exchange_area_id", "string", "exchange_area_id", "string"), ("has_documents", "long", "has_documents", "long"), ("category", "string", "category", "string"), ("ctr_pos_loctype", "string", "ctr_pos_loctype", "string"), ("ctr_pos_locid", "string", "ctr_pos_locid", "string"), ("ctr_pos_loc_gkey", "long", "ctr_pos_loc_gkey", "long"), ("ctr_pos_slot", "string", "ctr_pos_slot", "string"), ("ctr_pos_orientation", "string", "ctr_pos_orientation", "string"), ("ctr_pos_name", "string", "ctr_pos_name", "string"), ("ctr_pos_bin", "long", "ctr_pos_bin", "long"), ("ctr_pos_tier", "long", "ctr_pos_tier", "long"), ("ctr_pos_anchor", "string", "ctr_pos_anchor", "string"), ("ctr_pos_orientation_degrees", "float", "ctr_pos_orientation_degrees", "float"), ("ctr_pos_slot_on_carriage", "string", "ctr_pos_slot_on_carriage", "string"), ("ctr_pos_is_wheeled", "long", "ctr_pos_is_wheeled", "long"), ("chs_pos_loctype", "string", "chs_pos_loctype", "string"), ("chs_pos_locid", "string", "chs_pos_locid", "string"), ("chs_pos_loc_gkey", "long", "chs_pos_loc_gkey", "long"), ("chs_pos_slot", "string", "chs_pos_slot", "string"), ("chs_pos_orientation", "string", "chs_pos_orientation", "string"), ("chs_pos_name", "string", "chs_pos_name", "string"), ("chs_pos_bin", "long", "chs_pos_bin", "long"), ("chs_pos_tier", "long", "chs_pos_tier", "long"), ("chs_pos_anchor", "string", "chs_pos_anchor", "string"), ("chs_pos_orientation_degrees", "float", "chs_pos_orientation_degrees", "float"), ("chs_pos_slot_on_carriage", "string", "chs_pos_slot_on_carriage", "string"), ("flex_string01", "string", "flex_string01", "string"), ("flex_string02", "string", "flex_string02", "string"), ("flex_string03", "string", "flex_string03", "string"), ("flex_string04", "string", "flex_string04", "string"), ("flex_string09", "string", "flex_string09", "string"), ("flex_string10", "string", "flex_string10", "string"), ("flex_string11", "string", "flex_string11", "string"), ("flex_string12", "string", "flex_string12", "string"), ("flex_string13", "string", "flex_string13", "string"), ("flex_string14", "string", "flex_string14", "string"), ("flex_string15", "string", "flex_string15", "string"), ("flex_string16", "string", "flex_string16", "string"), ("flex_string17", "string", "flex_string17", "string"), ("flex_string18", "string", "flex_string18", "string"), ("flex_string19", "string", "flex_string19", "string"), ("flex_string05", "string", "flex_string05", "string"), ("flex_string06", "string", "flex_string06", "string"), ("flex_string07", "string", "flex_string07", "string"), ("flex_string08", "string", "flex_string08", "string"), ("flex_string20", "string", "flex_string20", "string"), ("flex_string21", "string", "flex_string21", "string"), ("flex_string22", "string", "flex_string22", "string"), ("flex_string23", "string", "flex_string23", "string"), ("flex_string24", "string", "flex_string24", "string"), ("flex_string25", "string", "flex_string25", "string"), ("flex_date01", "string", "flex_date01", "timestamp"), ("flex_date02", "string", "flex_date02", "timestamp"), ("flex_date03", "string", "flex_date03", "timestamp"), ("flex_date04", "string", "flex_date04", "timestamp"), ("tran_flex_string01", "string", "tran_flex_string01", "string"), ("tran_flex_string02", "string", "tran_flex_string02", "string"), ("tran_flex_string03", "string", "tran_flex_string03", "string"), ("tran_flex_string04", "string", "tran_flex_string04", "string"), ("tran_flex_string05", "string", "tran_flex_string05", "string"), ("tran_flex_string06", "string", "tran_flex_string06", "string"), ("tran_flex_string07", "string", "tran_flex_string07", "string"), ("tran_flex_string08", "string", "tran_flex_string08", "string"), ("tran_flex_date01", "string", "tran_flex_date01", "timestamp"), ("tran_flex_date02", "string", "tran_flex_date02", "timestamp"), ("tran_flex_date03", "string", "tran_flex_date03", "timestamp"), ("tran_flex_date04", "string", "tran_flex_date04", "timestamp"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("unit_gkey", "long", "unit_gkey", "long"), ("line_gkey", "long", "line_gkey", "long"), ("chs_gkey", "long", "chs_gkey", "long"), ("ctr_gkey", "long", "ctr_gkey", "long"), ("chsacc_gkey", "long", "chsacc_gkey", "long"), ("ctracc_gkey", "long", "ctracc_gkey", "long"), ("ctr_owner_gkey", "long", "ctr_owner_gkey", "long"), ("chs_owner_gkey", "long", "chs_owner_gkey", "long"), ("ctr_acc_owner_gkey", "long", "ctr_acc_owner_gkey", "long"), ("chs_acc_owner_gkey", "long", "chs_acc_owner_gkey", "long"), ("ctr_operator_gkey", "long", "ctr_operator_gkey", "long"), ("chs_operator_gkey", "long", "chs_operator_gkey", "long"), ("ctr_acc_operator_gkey", "long", "ctr_acc_operator_gkey", "long"), ("chs_acc_operator_gkey", "long", "chs_acc_operator_gkey", "long"), ("eqo_gkey", "long", "eqo_gkey", "long"), ("eqoitem_gkey", "long", "eqoitem_gkey", "long"), ("cv_gkey", "long", "cv_gkey", "long"), ("pol_gkey", "long", "pol_gkey", "long"), ("pod1_gkey", "long", "pod1_gkey", "long"), ("pod2_gkey", "long", "pod2_gkey", "long"), ("pod3_gkey", "long", "pod3_gkey", "long"), ("opt_pod1_gkey", "long", "opt_pod1_gkey", "long"), ("commodity_gkey", "long", "commodity_gkey", "long"), ("bl_gkey", "long", "bl_gkey", "long"), ("bl_item_gkey", "long", "bl_item_gkey", "long"), ("cargo_service_order_gkey", "long", "cargo_service_order_gkey", "long"), ("cargo_service_order_nbr", "string", "cargo_service_order_nbr", "string"), ("cargo_service_order_item_gkey", "long", "cargo_service_order_item_gkey", "long"), ("trkco_gkey", "long", "trkco_gkey", "long"), ("truck_visit_gkey", "long", "truck_visit_gkey", "long"), ("ctr_damages_gkey", "long", "ctr_damages_gkey", "long"), ("chs_damages_gkey", "long", "chs_damages_gkey", "long"), ("haz_gkey", "long", "haz_gkey", "long"), ("ctr_acc_damages_gkey", "long", "ctr_acc_damages_gkey", "long"), ("chs_acc_damages_gkey", "long", "chs_acc_damages_gkey", "long"), ("xchln_gkey", "long", "xchln_gkey", "long"), ("app_xchln_gkey", "long", "app_xchln_gkey", "long"), ("yard_gkey", "long", "yard_gkey", "long"), ("fcy_gkey", "long", "fcy_gkey", "long"), ("complex_gkey", "long", "complex_gkey", "long"), ("operator_gkey", "long", "operator_gkey", "long"), ("gate_gkey", "long", "gate_gkey", "long"), ("next_gate_gkey", "long", "next_gate_gkey", "long"), ("cancel_reason_gkey", "long", "cancel_reason_gkey", "long"), ("tank_rails", "string", "tank_rails", "string"), ("auto_closed", "long", "auto_closed", "long"), ("che_id", "string", "che_id", "string"), ("is_tran_bundled", "long", "is_tran_bundled", "long"), ("ctr_vgm_weight", "float", "ctr_vgm_weight", "float"), ("ctr_vgm_entity", "string", "ctr_vgm_entity", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "roadTT_mappingcombined")

## road_truck_transaction_stages mapping
roadTTS_mappingcombined = ApplyMapping.apply(frame = roadTTS_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("seq", "long", "seq", "long"), ("id", "string", "id", "string"), ("stage_start", "string", "stage_start", "timestamp"), ("stage_end", "string", "stage_end", "timestamp"), ("status", "string", "status", "string"), ("stage_type", "string", "stage_type", "string"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("stage_order", "long", "stage_order", "long"), ("had_trouble", "long", "had_trouble", "long"), ("queue_time", "long", "queue_time", "long"), ("trouble_resolve_time", "long", "trouble_resolve_time", "long"), ("tran_gkey", "long", "tran_gkey", "long"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "roadTTS_mappingcombined")

## road_truck_visit_details mapping
roadTVD_mappingcombined = ApplyMapping.apply(frame = roadTVD_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), 
("audtdateadded", "string", "audtdateadded", "timestamp"), ("tvdtls_gkey", "long", "tvdtls_gkey", "long"), ("bat_nbr", "string", "bat_nbr", "string"), ("bat_nbr_out", "string", "bat_nbr_out", "string"),
("status", "string", "status", "string"), ("truck_status", "string", "truck_status", "string"), ("truck_license_nbr", "string", "truck_license_nbr", "string"), 
("truck_id", "string", "truck_id", "string"), ("truck_aei_tag_id", "string", "truck_aei_tag_id", "string"), ("driver_license_nbr", "string", "driver_license_nbr", "string"), 
("driver_card_id", "string", "driver_card_id", "string"), ("driver_name", "string", "driver_name", "string"), ("driver_is_hazard_licensed", "long", "driver_is_hazard_licensed", "long"), 
("call_up_time", "string", "call_up_time", "timestamp"), ("entered_yard", "string", "entered_yard", "timestamp"), ("exited_yard", "string", "exited_yard", "timestamp"), 
("next_stage_id", "string", "next_stage_id", "string"), ("scale_weight", "float", "scale_weight", "float"), ("created", "string", "created", "timestamp"), 
("creator", "string", "creator", "string"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("priority", "string", "priority", "string"), 
("gos_tv_key", "long", "gos_tv_key", "long"), ("wait_status", "string", "wait_status", "string"), ("pos_loctype", "string", "pos_loctype", "string"), ("pos_locid", "string", "pos_locid", "string"), 
("pos_loc_gkey", "long", "pos_loc_gkey", "long"), ("pos_slot", "string", "pos_slot", "string"), ("pos_orientation", "string", "pos_orientation", "string"), 
("pos_name", "string", "pos_name", "string"), ("pos_bin", "long", "pos_bin", "long"), ("pos_tier", "long", "pos_tier", "long"), ("pos_anchor", "string", "pos_anchor", "string"), 
("pos_orientation_degrees", "float", "pos_orientation_degrees", "float"), ("pos_slot_on_carriage", "string", "pos_slot_on_carriage", "string"), ("truck_action", "long", "truck_action", "long"), 
("pre_stage_status", "string", "pre_stage_status", "string"), ("gate_gkey", "long", "gate_gkey", "long"), ("entry_lane_gkey", "long", "entry_lane_gkey", "long"), 
("entry_gateln_gkey", "long", "entry_gateln_gkey", "long"), ("exchange_lane_gkey", "long", "exchange_lane_gkey", "long"), ("xchln_gkey", "long", "xchln_gkey", "long"), 
("exit_lane_gkey", "long", "exit_lane_gkey", "long"), ("exit_gateln_gkey", "long", "exit_gateln_gkey", "long"), ("trouble_lane_gkey", "long", "trouble_lane_gkey", "long"), 
("trouble_gateln_gkey", "long", "trouble_gateln_gkey", "long"), ("trkco_gkey", "long", "trkco_gkey", "long"), ("truck_gkey", "long", "truck_gkey", "long"), 
("driver_gkey", "long", "driver_gkey", "long"), ("truck_visit_appointment_nbr", "long", "truck_visit_appointment_nbr", "long"), ("flex_string01", "string", "flex_string01", "string"), 
("flex_string02", "string", "flex_string02", "string"), ("flex_string03", "string", "flex_string03", "string"), ("flex_string04", "string", "flex_string04", "string"),
("flex_string05", "string", "flex_string05", "string"),("flex_string06", "string", "flex_string06", "string"),("flex_string07", "string", "flex_string07", "string"),("flex_string08", "string", "flex_string08", "string"),
("flex_date01", "string", "flex_date01", "timestamp"), ("flex_date02", "string", "flex_date02", "timestamp"),("trucking_co_id", "string", "trucking_co_id", "string"), ("chpro_gkey", "long", "chpro_gkey", "long"), ("chassis_count", "long", "chassis_count", "long"), ("chassis_length_overall", "float", "chassis_length_overall", "float"), 
("chassis_total_teu", "long", "chassis_total_teu", "long"), ("chassis1_teu", "long", "chassis1_teu", "long"), ("chassis2_teu", "long", "chassis2_teu", "long"), ("chassis3_teu", "long", "chassis3_teu", "long"), ("chassis4_teu", "long", "chassis4_teu", "long"), ("chassis5_teu", "long", "chassis5_teu", "long"), 
("closure_type", "string", "closure_type", "string"), ("extra_time_override", "long", "extra_time_override", "long"), ("has_visit_trouble", "long", "has_visit_trouble", "long"), 
("xcharea_gkey", "long", "xcharea_gkey", "long"), ("next_xcharea_gkey", "long", "next_xcharea_gkey", "long"), ("auto_closed", "long", "auto_closed", "long"), ("tv_appointment_external_ref", "string", "tv_appointment_external_ref", "string"),
("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "roadTVD_mappingcombined")

## road_truck_visit_stages mapping
roadTVS_mappingcombined = ApplyMapping.apply(frame = roadTVS_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("tvstat_gkey", "long", "tvstat_gkey", "long"), ("seq", "long", "seq", "long"), ("id", "string", "id", "string"), ("stage_start", "string", "stage_start", "timestamp"), ("stage_end", "string", "stage_end", "timestamp"), ("queue_time", "long", "queue_time", "long"), ("had_trouble", "long", "had_trouble", "long"), ("trouble_resolve_time", "long", "trouble_resolve_time", "long"), ("extra_time_mins", "long", "extra_time_mins", "long"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "roadTVS_mappingcombined")

## road_truck_visit_stats mapping
roadTVStat_mappingcombined = ApplyMapping.apply(frame = roadTVStat_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("gate_gkey", "long", "gate_gkey", "long"), ("tv_gkey", "long", "tv_gkey", "long"), ("trkc_gkey", "long", "trkc_gkey", "long"), ("driver_gkey", "long", "driver_gkey", "long"), ("line_rcv_gkey", "long", "line_rcv_gkey", "long"), ("line_dlv_gkey", "long", "line_dlv_gkey", "long"), ("had_trouble", "long", "had_trouble", "long"), ("started", "string", "started", "timestamp"), ("completed", "string", "completed", "timestamp"), ("turn_time", "long", "turn_time", "long"), ("tv_status", "string", "tv_status", "string"), ("tran_count", "long", "tran_count", "long"), ("is_canceled", "long", "is_canceled", "long"), ("dlv_full_count", "long", "dlv_full_count", "long"), ("rcv_full_count", "long", "rcv_full_count", "long"), ("dlv_mty_count", "long", "dlv_mty_count", "long"), ("rcv_mty_count", "long", "rcv_mty_count", "long"), ("dlv_chs_count", "long", "dlv_chs_count", "long"), ("rcv_chs_count", "long", "rcv_chs_count", "long"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "roadTVStat_mappingcombined")

## vsl_vessels mapping
vslV_mappingcombined = ApplyMapping.apply(frame = vslV_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("reference_set", "long", "reference_set", "long"), ("id", "string", "id", "string"), ("lloyds_id", "string", "lloyds_id", "string"), ("name", "string", "name", "string"), ("vesclass_gkey", "long", "vesclass_gkey", "long"), ("owner_gkey", "long", "owner_gkey", "long"), ("ves_captain", "string", "ves_captain", "string"), ("radio_call_sign", "string", "radio_call_sign", "string"), ("country_code", "string", "country_code", "string"), ("is_active", "long", "is_active", "long"), ("unit_system", "string", "unit_system", "string"), ("temperature_unit", "string", "temperature_unit", "string"), ("notes", "string", "notes", "string"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("stowage_scheme", "string", "stowage_scheme", "string"), ("documentation_nbr", "string", "documentation_nbr", "string"), ("service_registry_nbr", "string", "service_registry_nbr", "string"), ("life_cycle_state", "string", "life_cycle_state", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "vslV_mappingcombined")

## vsl_vessel_classes mapping
vslVC_mappingcombined = ApplyMapping.apply(frame = vslVC_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("reference_set", "long", "reference_set", "long"), ("id", "string", "id", "string"), ("name", "string", "name", "string"), ("basic_class", "string", "basic_class", "string"), ("is_active", "long", "is_active", "long"), ("is_self_sustaining", "long", "is_self_sustaining", "long"), ("loa_cm", "long", "loa_cm", "long"), ("beam_cm", "long", "beam_cm", "long"), ("bays_forward", "long", "bays_forward", "long"), ("bays_aft", "long", "bays_aft", "long"), ("bow_overhang_cm", "long", "bow_overhang_cm", "long"), ("stern_overhang_cm", "long", "stern_overhang_cm", "long"), ("vbridge_to_bow_cm", "long", "vbridge_to_bow_cm", "long"), ("gross_registered_ton", "float", "gross_registered_ton", "float"), ("net_registered_ton", "float", "net_registered_ton", "float"), ("notes", "string", "notes", "string"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("life_cycle_state", "string", "life_cycle_state", "string"), ("abm_gkey", "long", "abm_gkey", "long"), ("last_nyd_checksum_hex", "string", "last_nyd_checksum_hex", "string"),("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "vslVC_mappingcombined")

## vsl_vessel_visit_details mapping
vslVVD_mappingcombined = ApplyMapping.apply(frame = vslVVD_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("vvd_gkey", "long", "vvd_gkey", "long"), ("bizu_gkey", "long", "bizu_gkey", "long"), ("vessel_gkey", "long", "vessel_gkey", "long"), ("ib_vyg", "string", "ib_vyg", "string"), ("ob_vyg", "string", "ob_vyg", "string"), ("stacking_strategy", "string", "stacking_strategy", "string"), ("is_dray_off", "long", "is_dray_off", "long"), ("notes", "string", "notes", "string"), ("in_customs_voy_nbr", "string", "in_customs_voy_nbr", "string"), ("out_customs_voy_nbr", "string", "out_customs_voy_nbr", "string"), ("is_no_client_access", "long", "is_no_client_access", "long"), ("is_common_carrier", "long", "is_common_carrier", "long"), ("published_eta", "string", "published_eta", "timestamp"), ("published_etd", "string", "published_etd", "timestamp"), ("begin_receive", "string", "begin_receive", "timestamp"), ("empty_pickup", "string", "empty_pickup", "timestamp"), ("cargo_cutoff", "string", "cargo_cutoff", "timestamp"), ("haz_cutoff", "string", "haz_cutoff", "timestamp"), ("reefer_cutoff", "string", "reefer_cutoff", "timestamp"), ("labor_on_board", "string", "labor_on_board", "timestamp"), ("labor_off_board", "string", "labor_off_board", "timestamp"), ("off_port_arr", "string", "off_port_arr", "timestamp"), ("off_port_dep", "string", "off_port_dep", "timestamp"), ("pilot_on_board", "string", "pilot_on_board", "timestamp"), ("pilot_off_board", "string", "pilot_off_board", "timestamp"), ("start_work", "string", "start_work", "timestamp"), ("end_work", "string", "end_work", "timestamp"), ("in_ves_captain", "string", "in_ves_captain", "string"), ("out_ves_captain", "string", "out_ves_captain", "string"), ("export_mnft_nbr", "string", "export_mnft_nbr", "string"), ("import_mnft_nbr", "string", "import_mnft_nbr", "string"), ("import_mnft_date", "string", "import_mnft_date", "timestamp"), ("export_mnft_date", "string", "export_mnft_date", "timestamp"), ("classification", "string", "classification", "string"), ("flex_string01", "string", "flex_string01", "string"), ("flex_string02", "string", "flex_string02", "string"), ("flex_string03", "string", "flex_string03", "string"), ("flex_string04", "string", "flex_string04", "string"), ("flex_string05", "string", "flex_string05", "string"), ("flex_string06", "string", "flex_string06", "string"), ("flex_string07", "string", "flex_string07", "string"), ("flex_string08", "string", "flex_string08", "string"), ("flex_date01", "string", "flex_date01", "timestamp"), ("flex_date02", "string", "flex_date02", "timestamp"), ("flex_date03", "string", "flex_date03", "timestamp"), ("flex_date04", "string", "flex_date04", "timestamp"), ("flex_date05", "string", "flex_date05", "timestamp"), ("flex_date06", "string", "flex_date06", "timestamp"), ("flex_date07", "string", "flex_date07", "timestamp"), ("flex_date08", "string", "flex_date08", "timestamp"), ("est_load", "long", "est_load", "long"), ("est_discharge", "long", "est_discharge", "long"), ("est_restow", "long", "est_restow", "long"), ("est_shift", "long", "est_shift", "long"), ("est_bbk_load", "long", "est_bbk_load", "long"), ("est_bbk_discharge", "long", "est_bbk_discharge", "long"), ("custdff_block_late_receive", "bigint", "custdff_block_late_receive", "bigint"),("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "vslVVD_mappingcombined")

## vsl_vessel_visit_lines mapping
vslVVL_mappingcombined = ApplyMapping.apply(frame = vslVVL_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"), ("audtdateadded", "string", "audtdateadded", "timestamp"), ("vvline_gkey", "long", "vvline_gkey", "long"), ("vvd_gkey", "long", "vvd_gkey", "long"), ("line_in_voy_nbr", "string", "line_in_voy_nbr", "string"), ("line_out_voy_nbr", "string", "line_out_voy_nbr", "string"), ("line_gkey", "long", "line_gkey", "long"), ("begin_receive", "string", "begin_receive", "timestamp"), ("empty_pickup", "string", "empty_pickup", "timestamp"), ("cargo_cutoff", "string", "cargo_cutoff", "timestamp"), ("reefer_cutoff", "string", "reefer_cutoff", "timestamp"), ("haz_cutoff", "string", "haz_cutoff", "timestamp"), ("activate_yard", "string", "activate_yard", "timestamp"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "vslVVL_mappingcombined")


                                        ####################################
                                        ####        DATASINK BLOCK      ####
                                        ####################################
										
## road_truck_actions datasink
roadTA_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = roadTA_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/road_truck_actions"}, format = "parquet", transformation_ctx = "roadTA_datasinkcombined")

## road_truck_company_drivers datasink
roadTCD_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = roadTCD_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/road_truck_company_drivers"}, format = "parquet", transformation_ctx = "roadTCD_datasinkcombined")

## road_truck_drivers datasink
roadTD_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = roadTD_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/road_truck_drivers"}, format = "parquet", transformation_ctx = "roadTD_datasinkcombined")

## road_truck_transactions datasink
roadTT_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = roadTT_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/road_truck_transactions"}, format = "parquet", transformation_ctx = "roadTT_datasinkcombined")

## road_truck_transaction_stages datasink
roadTTS_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = roadTTS_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/road_truck_transaction_stages"}, format = "parquet", transformation_ctx = "roadTTS_datasinkcombined")

## road_truck_visit_details datasink
roadTVD_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = roadTVD_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/road_truck_visit_details"}, format = "parquet", transformation_ctx = "roadTVD_datasinkcombined")

## road_truck_visit_stages datasink
roadTVS_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = roadTVS_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/road_truck_visit_stages"}, format = "parquet", transformation_ctx = "roadTVS_datasinkcombined")

## road_truck_visit_stats datasink
roadTVStat_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = roadTVStat_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/road_truck_visit_stats"}, format = "parquet", transformation_ctx = "roadTVStat_datasinkcombined")

## road_document_messages datasink
docmes_datasink = glueContext.write_dynamic_frame.from_options(frame = docmes_applymapping, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/road_document_messages"}, format = "parquet", transformation_ctx = "docmes_datasink")

## vsl_vessels datasink
vslV_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = vslV_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/vsl_vessels"}, format = "parquet", transformation_ctx = "vslV_datasinkcombined")

## vsl_vessel_classes datasink
vslVC_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = vslVC_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/vsl_vessel_classes"}, format = "parquet", transformation_ctx = "vslVC_datasinkcombined")

## vsl_vessel_visit_details datasink
vslVVD_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = vslVVD_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/vsl_vessel_visit_details"}, format = "parquet", transformation_ctx = "vslVVD_datasinkcombined")

## vsl_vessel_visit_lines datasink
vslVVL_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = vslVVL_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/vsl_vessel_visit_lines"}, format = "parquet", transformation_ctx = "vslVVL_datasinkcombined")



job.commit()