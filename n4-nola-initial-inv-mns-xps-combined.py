import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.dynamicframe import DynamicFrame
from awsglue.job import Job
from pyspark.sql import SparkSession
from pyspark.sql.functions import udf
from pyspark.sql.types import StringType
from pyspark.sql.functions import lit
import time
import boto3

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

client = boto3.client('lambda', region_name='us-west-2')
current_timestamp = time.strftime("%Y-%m-%d %H:%M:%S")


										######################################
                                        ####        CONNECTION BLOCK      ####
                                        ######################################
## inv_storage_rule connection
storrul_DS = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "inv_storage_rule", transformation_ctx = "storrul_DS")
storrul_regDF = storrul_DS.toDF()
storrul_regDF = storrul_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
storrul_distDF = storrul_regDF.distinct()
storrul_dynDF = DynamicFrame.fromDF(storrul_distDF,glueContext,"nested")

## inv_goods connection
invG_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "inv_goods", transformation_ctx = "invG_ds")
invG_regDF = invG_ds.toDF()
invG_regDF = invG_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
invG_distDF = invG_regDF.distinct()
invG_dynDF = DynamicFrame.fromDF(invG_distDF,glueContext,"nested")

## inv_move_event connection
invME_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "inv_move_event", transformation_ctx = "invME_ds")
invME_regDF = invME_ds.toDF()
invME_regDF = invME_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
invME_distDF = invME_regDF.distinct()
invME_dynDF = DynamicFrame.fromDF(invME_distDF,glueContext,"nested")

## inv_unit connection
invU_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "inv_unit", transformation_ctx = "invU_ds")
invU_regDF = invU_ds.toDF()
invU_regDF = invU_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
invU_distDF=invU_regDF.distinct()
invU_dynDF = DynamicFrame.fromDF(invU_distDF,glueContext,"nested")

## inv_unit_fcy_visit connection
invFCYV_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "inv_unit_fcy_visit", transformation_ctx = "invFCYV_ds")
invFCYV_regDF = invFCYV_ds.toDF()
invFCYV_regDF = invFCYV_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
invFCYV_distDF=invFCYV_regDF.distinct()
invFCYV_dynDF = DynamicFrame.fromDF(invFCYV_distDF,glueContext,"nested")

## inv_unit_yrd_visit connection
invYRDV_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "inv_unit_yrd_visit", transformation_ctx = "invYRDV_ds")
invYRDV_regDF = invYRDV_ds.toDF()
invYRDV_regDF = invYRDV_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
invYRDV_distDF=invYRDV_regDF.distinct()
invYRDV_dynDF = DynamicFrame.fromDF(invYRDV_distDF,glueContext,"nested")

## inv_wi connection
invWI_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "inv_wi", transformation_ctx = "invWI_ds")
invWI_regDF = invWI_ds.toDF()
invWI_regDF = invWI_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
invWI_distDF=invWI_regDF.distinct()
invWI_dynDF = DynamicFrame.fromDF(invWI_distDF,glueContext,"nested")

## inv_wi_tracking connection
invWIT_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "inv_wi_tracking", transformation_ctx = "invWIT_ds")
invWIT_regDF = invWIT_ds.toDF()
invWIT_regDF = invWIT_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
invWIT_distDF=invWIT_regDF.distinct()
invWIT_dynDF = DynamicFrame.fromDF(invWIT_distDF,glueContext,"nested")

## inv_wq connection
invWQ_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "inv_wq", transformation_ctx = "invWQ_ds")
invWQ_regDF = invWQ_ds.toDF()
invWQ_regDF = invWQ_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
invWQ_distDF=invWQ_regDF.distinct()
invWQ_dynDF = DynamicFrame.fromDF(invWQ_distDF,glueContext,"nested")

## mns_che_move_statistics connection
mnsCMS_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "mns_che_move_statistics", transformation_ctx = "mnsCMS_ds")
mnsCMS_regDF = mnsCMS_ds.toDF()
mnsCMS_regDF = mnsCMS_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
mnsCMS_distDF=mnsCMS_regDF.distinct()
mnsCMS_dynDF = DynamicFrame.fromDF(mnsCMS_distDF,glueContext,"nested")

## mns_che_operator_statistics connection
mnsCOS_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "mns_che_operator_statistics", transformation_ctx = "mnsCOS_ds")
mnsCOS_regDF = mnsCOS_ds.toDF()
mnsCOS_regDF = mnsCOS_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
mnsCOS_distDF=mnsCOS_regDF.distinct()
mnsCOS_dynDF = DynamicFrame.fromDF(mnsCOS_distDF,glueContext,"nested")

## mns_che_session connection
mnsCSE_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "mns_che_session", transformation_ctx = "mnsCSE_ds")
mnsCSE_regDF = mnsCSE_ds.toDF()
mnsCSE_regDF = mnsCSE_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
mnsCSE_distDF=mnsCSE_regDF.distinct()
mnsCSE_dynDF = DynamicFrame.fromDF(mnsCSE_distDF,glueContext,"nested")

## mns_che_session_period connection
mnsCSP_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "mns_che_session_period", transformation_ctx = "mnsCSP_ds")
mnsCSP_regDF = mnsCSP_ds.toDF()
mnsCSP_regDF = mnsCSP_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
mnsCSP_distDF=mnsCSP_regDF.distinct()
mnsCSP_dynDF = DynamicFrame.fromDF(mnsCSP_distDF,glueContext,"nested")

## mns_che_status connection
mnsCST_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "mns_che_status", transformation_ctx = "mnsCST_ds")
mnsCST_regDF = mnsCST_ds.toDF()
mnsCST_regDF = mnsCST_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
mnsCST_distDF=mnsCST_regDF.distinct()
mnsCST_dynDF = DynamicFrame.fromDF(mnsCST_distDF,glueContext,"nested")

## mns_che_trip_statistics connection
mnsCTS_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "mns_che_trip_statistics", transformation_ctx = "mnsCTS_ds")
mnsCTS_regDF = mnsCTS_ds.toDF()
mnsCTS_regDF = mnsCTS_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
mnsCTS_distDF=mnsCTS_regDF.distinct()
mnsCTS_dynDF = DynamicFrame.fromDF(mnsCTS_distDF,glueContext,"nested")

## xps_che connection
xpsCHE_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "xps_che", transformation_ctx = "xpsCHE_ds")
xpsCHE_regDF = xpsCHE_ds.toDF()
xpsCHE_regDF = xpsCHE_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
xpsCHE_distDF=xpsCHE_regDF.distinct()
xpsCHE_dynDF = DynamicFrame.fromDF(xpsCHE_distDF,glueContext,"nested")

## xps_ecevent connection
xpsECE_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "xps_ecevent", transformation_ctx = "xpsECE_ds")
xpsECE_regDF = xpsECE_ds.toDF()
xpsECE_regDF = xpsECE_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
xpsECE_distDF=xpsECE_regDF.distinct()
xpsECE_dynDF = DynamicFrame.fromDF(xpsECE_distDF,glueContext,"nested")

## xps_ecuser connection
xpsECU_ds = glueContext.create_dynamic_frame.from_catalog(database = "nola_staging_initial", table_name = "xps_ecuser", transformation_ctx = "xpsECU_ds")
xpsECU_regDF = xpsECU_ds.toDF()
xpsECU_regDF = xpsECU_regDF.withColumn("sourcesystem",lit("NOLA")).withColumn("dboperationtype",lit("L")).withColumn("audtdateadded",lit(current_timestamp))
xpsECU_distDF=xpsECU_regDF.distinct()
xpsECU_dynDF = DynamicFrame.fromDF(xpsECU_distDF,glueContext,"nested")


                                        ####################################
                                        ####        MAPPING BLOCK       ####
                                        ####################################

## inv_storage_rule mapping
storrul_applymapping = ApplyMapping.apply(frame = storrul_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"),("gkey", "long", "gkey", "long"), ("id", "string", "id", "string"), ("reference_set", "long", "reference_set", "long"), ("start_day", "string", "start_day", "string"), ("is_start_day_included", "long", "is_start_day_included", "long"), ("start_day_extension", "long", "start_day_extension", "long"), ("end_daty", "string", "end_daty", "string"), ("is_end_day_included", "long", "is_end_day_included", "long"), ("end_day_extension", "long", "end_day_extension", "long"), ("is_freedays_included", "long", "is_freedays_included", "long"), ("is_gratis_included", "long", "is_gratis_included", "long"), ("round_up_hours", "long", "round_up_hours", "long"), ("round_up_minutes", "long", "round_up_minutes", "long"), ("is_rule_for_power", "long", "is_rule_for_power", "long"), ("start_day_cutoff_hours", "long", "start_day_cutoff_hours", "long"), ("end_day_cutoff_hours", "long", "end_day_cutoff_hours", "long"), ("power_charge_by", "string", "power_charge_by", "string"), ("power_first_tier_rounding", "long", "power_first_tier_rounding", "long"), ("power_other_tier_rounding", "long", "power_other_tier_rounding", "long"), ("is_free_time_chged_if_exceeded", "long", "is_free_time_chged_if_exceeded", "long"), ("calendar_gkey", "long", "calendar_gkey", "long"), ("calculation_extension", "long", "calculation_extension", "long"), ("created", "string", "created", "timestamp"), ("creator", "string", "creator", "string"), ("changed", "string", "changed", "timestamp"), ("changer", "string", "changer", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "storrul_applymapping")

## inv_goods mapping
invG_mappingcombined = ApplyMapping.apply(frame = invG_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"),("gkey", "long", "gkey", "long"), ("consignee", "string", "consignee", "string"), ("shipper", "string", "shipper", "string"), ("consignee_bzu", "long", "consignee_bzu", "long"), ("shipper_bzu", "long", "shipper_bzu", "long"), ("commodity_gkey", "long", "commodity_gkey", "long"), ("origin", "string", "origin", "string"), ("destination", "string", "destination", "string"), ("hazardous", "long", "hazardous", "long"), ("imdg_types", "string", "imdg_types", "string"), ("hazard_un_nums", "string", "hazard_un_nums", "string"), ("bl_nbr", "string", "bl_nbr", "string"), ("hazards_gkey", "long", "hazards_gkey", "long"), ("temp_reqd_c", "float", "temp_reqd_c", "float"), ("temp_max_c", "float", "temp_max_c", "float"), ("temp_min_c", "float", "temp_min_c", "float"), ("temp_show_fahrenheit", "long", "temp_show_fahrenheit", "long"), ("vent_required_pct", "float", "vent_required_pct", "float"), ("vent_unit", "string", "vent_unit", "string"), ("humidity_required_pct", "float", "humidity_required_pct", "float"), ("o2_pct", "float", "o2_pct", "float"), ("co2_pct", "float", "co2_pct", "float"), ("on_power", "string", "on_power", "timestamp"), ("off_power_time", "string", "off_power_time", "timestamp"), ("time_mon1", "string", "time_mon1", "timestamp"), ("time_mon2", "string", "time_mon2", "timestamp"), ("time_mon3", "string", "time_mon3", "timestamp"), ("time_mon4", "string", "time_mon4", "timestamp"), ("unplug_warn_min", "long", "unplug_warn_min", "long"), ("ext_time_monitors", "long", "ext_time_monitors", "long"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "invG_mappingcombined")

## inv_move_event mapping
invME_mappingcombined = ApplyMapping.apply(frame = invME_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("mve_gkey", "long", "mve_gkey", "long"), ("move_kind", "string", "move_kind", "string"), ("ufv_gkey", "long", "ufv_gkey", "long"), ("line_op", "long", "line_op", "long"), ("carrier_gkey", "long", "carrier_gkey", "long"), ("exclude", "long", "exclude", "long"), ("fm_pos_loctype", "string", "fm_pos_loctype", "string"), ("fm_pos_locid", "string", "fm_pos_locid", "string"), ("fm_pos_loc_gkey", "long", "fm_pos_loc_gkey", "long"), ("fm_pos_slot", "string", "fm_pos_slot", "string"), ("fm_pos_orientation", "string", "fm_pos_orientation", "string"), ("fm_pos_name", "string", "fm_pos_name", "string"), ("fm_pos_bin", "long", "fm_pos_bin", "long"), ("fm_pos_tier", "long", "fm_pos_tier", "long"), ("fm_pos_anchor", "string", "fm_pos_anchor", "string"), ("fm_pos_orientation_degrees", "float", "fm_pos_orientation_degrees", "float"), ("to_pos_loctype", "string", "to_pos_loctype", "string"), ("to_pos_locid", "string", "to_pos_locid", "string"), ("to_pos_loc_gkey", "long", "to_pos_loc_gkey", "long"), ("to_pos_slot", "string", "to_pos_slot", "string"), ("to_pos_orientation", "string", "to_pos_orientation", "string"), ("to_pos_name", "string", "to_pos_name", "string"), ("to_pos_bin", "long", "to_pos_bin", "long"), ("to_pos_tier", "long", "to_pos_tier", "long"), ("to_pos_anchor", "string", "to_pos_anchor", "string"), ("to_pos_orientation_degrees", "float", "to_pos_orientation_degrees", "float"), ("che_fetch", "long", "che_fetch", "long"), ("che_carry", "long", "che_carry", "long"), ("che_put", "long", "che_put", "long"), ("che_qc", "long", "che_qc", "long"), ("dist_start", "long", "dist_start", "long"), ("dist_carry", "long", "dist_carry", "long"), ("t_carry_complete", "string", "t_carry_complete", "timestamp"), ("t_dispatch", "string", "t_dispatch", "timestamp"), ("t_fetch", "string", "t_fetch", "timestamp"), ("t_discharge", "string", "t_discharge", "timestamp"), ("t_put", "string", "t_put", "timestamp"), ("t_carry_fetch_ready", "string", "t_carry_fetch_ready", "timestamp"), ("t_carry_put_ready", "string", "t_carry_put_ready", "timestamp"), ("t_carry_dispatch", "string", "t_carry_dispatch", "timestamp"), ("t_tz_arrival", "string", "t_tz_arrival", "timestamp"), ("rehandle_count", "long", "rehandle_count", "long"), ("twin_fetch", "long", "twin_fetch", "long"), ("twin_carry", "long", "twin_carry", "long"), ("twin_put", "long", "twin_put", "long"), ("restow_account", "string", "restow_account", "string"), ("service_order", "string", "service_order", "string"), ("restow_reason", "string", "restow_reason", "string"), ("processed", "long", "processed", "long"), ("pow", "string", "pow", "string"), ("che_carry_login_name", "string", "che_carry_login_name", "string"), ("che_put_login_name", "string", "che_put_login_name", "string"), ("che_fetch_login_name", "string", "che_fetch_login_name", "string"), ("berth", "string", "berth", "string"), ("category", "string", "category", "string"), ("freight_kind", "string", "freight_kind", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "invME_mappingcombined")

## inv_unit mapping
invU_mappingcombined = ApplyMapping.apply(frame = invU_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"),("gkey", "long", "gkey", "long"), ("id", "string", "id", "string"), ("foreignhost_key", "string", "foreignhost_key", "string"), ("visit_state", "string", "visit_state", "string"), ("needs_review", "long", "needs_review", "long"), ("placards_mismatched", "long", "placards_mismatched", "long"), ("create_time", "string", "create_time", "timestamp"), ("declrd_ib_cv", "long", "declrd_ib_cv", "long"), ("category", "string", "category", "string"), ("freight_kind", "string", "freight_kind", "string"), ("dray_status", "string", "dray_status", "string"), ("complex_gkey", "long", "complex_gkey", "long"), ("goods", "long", "goods", "long"), ("special_stow_gkey", "long", "special_stow_gkey", "long"), ("special_stow2_gkey", "long", "special_stow2_gkey", "long"), ("special_stow3_gkey", "long", "special_stow3_gkey", "long"), ("deck_rqmnt", "string", "deck_rqmnt", "string"), ("requires_power", "long", "requires_power", "long"), ("is_powered", "long", "is_powered", "long"), ("want_powered", "long", "want_powered", "long"), ("power_rqst_time", "string", "power_rqst_time", "timestamp"), ("is_alarm_on", "long", "is_alarm_on", "long"), ("is_oog", "long", "is_oog", "long"), ("oog_back_cm", "long", "oog_back_cm", "long"), ("oog_front_cm", "long", "oog_front_cm", "long"), ("oog_left_cm", "long", "oog_left_cm", "long"), ("oog_right_cm", "long", "oog_right_cm", "long"), ("oog_top_cm", "long", "oog_top_cm", "long"), ("vldt_rlgp", "long", "vldt_rlgp", "long"), ("xfer_rlgp", "long", "xfer_rlgp", "long"), ("line_op", "long", "line_op", "long"), ("goods_and_ctr_wt_kg", "float", "goods_and_ctr_wt_kg", "float"), ("goods_ctr_wt_kg_advised", "float", "goods_ctr_wt_kg_advised", "float"), ("goods_ctr_wt_kg_gate_measured", "float", "goods_ctr_wt_kg_gate_measured", "float"), ("goods_ctr_wt_kg_yard_measured", "float", "goods_ctr_wt_kg_yard_measured", "float"), ("goods_ctr_wt_kg_qc_measured", "float", "goods_ctr_wt_kg_qc_measured", "float"), ("ign_pyld_wghts", "long", "ign_pyld_wghts", "long"), ("ign_pyld_hghts", "long", "ign_pyld_hghts", "long"), ("is_stowplan_posted", "long", "is_stowplan_posted", "long"), ("seal_nbr1", "string", "seal_nbr1", "string"), ("seal_nbr2", "string", "seal_nbr2", "string"), ("seal_nbr3", "string", "seal_nbr3", "string"), ("seal_nbr4", "string", "seal_nbr4", "string"), ("is_ctr_sealed", "long", "is_ctr_sealed", "long"), ("is_bundle", "long", "is_bundle", "long"), ("active_ufv", "long", "active_ufv", "long"), ("opl_gkey", "long", "opl_gkey", "long"), ("pol_gkey", "long", "pol_gkey", "long"), ("cv_gkey", "long", "cv_gkey", "long"), ("service_gkey", "long", "service_gkey", "long"), ("pod1_gkey", "long", "pod1_gkey", "long"), ("pod2_gkey", "long", "pod2_gkey", "long"), ("opt1_gkey", "long", "opt1_gkey", "long"), ("opt2_gkey", "long", "opt2_gkey", "long"), ("opt3_gkey", "long", "opt3_gkey", "long"), ("group_gkey", "long", "group_gkey", "long"), ("description", "string", "description", "string"), ("export_clearance_nbr", "string", "export_clearance_nbr", "string"), ("return_to_location", "string", "return_to_location", "string"), ("trucking_company", "long", "trucking_company", "long"), ("pin_nbr", "string", "pin_nbr", "string"), ("bond_trucking_company", "long", "bond_trucking_company", "long"), ("bonded_destination", "string", "bonded_destination", "string"), ("projected_pod_gkey", "long", "projected_pod_gkey", "long"), ("ido_gkey", "long", "ido_gkey", "long"), ("ido_expiry_date", "string", "ido_expiry_date", "timestamp"), ("time_denorm_calc", "string", "time_denorm_calc", "timestamp"), ("time_state_change", "string", "time_state_change", "timestamp"), ("stopped_vessel", "long", "stopped_vessel", "long"), ("stopped_rail", "long", "stopped_rail", "long"), ("stopped_road", "long", "stopped_road", "long"), ("imped_vessel", "string", "imped_vessel", "string"), ("imped_rail", "string", "imped_rail", "string"), ("imped_road", "string", "imped_road", "string"), ("remark", "string", "remark", "string"), ("way_bill_nbr", "string", "way_bill_nbr", "string"), ("way_bill_date", "string", "way_bill_date", "timestamp"), ("export_release_nbr", "string", "export_release_nbr", "string"), ("export_release_date", "string", "export_release_date", "timestamp"), ("flex_string01", "string", "flex_string01", "string"), ("flex_string02", "string", "flex_string02", "string"), ("flex_string03", "string", "flex_string03", "string"), ("flex_string04", "string", "flex_string04", "string"), ("flex_string05", "string", "flex_string05", "string"), ("flex_string06", "string", "flex_string06", "string"), ("flex_string07", "string", "flex_string07", "string"), ("flex_string08", "string", "flex_string08", "string"), ("flex_string09", "string", "flex_string09", "string"), ("flex_string10", "string", "flex_string10", "string"), ("flex_string11", "string", "flex_string11", "string"), ("flex_string12", "string", "flex_string12", "string"), ("flex_string13", "string", "flex_string13", "string"), ("flex_string14", "string", "flex_string14", "string"), ("flex_string15", "string", "flex_string15", "string"), ("touch_ctr", "long", "touch_ctr", "long"), ("inbond", "string", "inbond", "string"), ("exam", "string", "exam", "string"), ("acry_equip_ids", "string", "acry_equip_ids", "string"), ("customs_id", "string", "customs_id", "string"), ("agent1", "long", "agent1", "long"), ("agent2", "long", "agent2", "long"), ("changed", "string", "changed", "timestamp"), ("cargo_quantity", "float", "cargo_quantity", "float"), ("cargo_quantity_unit", "string", "cargo_quantity_unit", "string"), ("related_unit", "long", "related_unit", "long"), ("relationship_role", "string", "relationship_role", "string"), ("unit_combo", "long", "unit_combo", "long"), ("eq_gkey", "long", "eq_gkey", "long"), ("carriage_unit", "long", "carriage_unit", "long"), ("eqs_gkey", "long", "eqs_gkey", "long"), ("damage", "string", "damage", "string"), ("sparcs_damage_code", "string", "sparcs_damage_code", "string"), ("dmgs_gkey", "long", "dmgs_gkey", "long"), ("condition_gkey", "long", "condition_gkey", "long"), ("bad_nbr", "string", "bad_nbr", "string"), ("is_folded", "long", "is_folded", "long"), ("arrive_order_item_gkey", "long", "arrive_order_item_gkey", "long"), ("depart_order_item_gkey", "long", "depart_order_item_gkey", "long"), ("is_reserved", "long", "is_reserved", "long"), ("mnr_status_gkey", "long", "mnr_status_gkey", "long"), ("placarded", "string", "placarded", "string"), ("grade_gkey", "long", "grade_gkey", "long"), ("goods_ctr_wt_kg_vgm", "float", "goods_ctr_wt_kg_vgm", "float"), ("unit_gross_weight_source", "string", "unit_gross_weight_source", "string"), ("unit_vgm_entity", "string", "unit_vgm_entity", "string"), ("unit_vgm_verified_date", "string", "unit_vgm_verified_date", "timestamp"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "invU_mappingcombined")

## inv_unit_fcy_visit mapping
invFCYV_mappingcombined = ApplyMapping.apply(frame = invFCYV_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),
("audtdateadded", "string", "audtdateadded", "timestamp"),("gkey", "long", "gkey", "long"), ("horizon", "long", "horizon", "long"), ("visit_state", "string", "visit_state", "string"), 
("transit_state", "string", "transit_state", "string"), ("create_time", "string", "create_time", "timestamp"), ("arrive_pos_loctype", "string", "arrive_pos_loctype", "string"), 
("arrive_pos_locid", "string", "arrive_pos_locid", "string"), ("arrive_pos_loc_gkey", "long", "arrive_pos_loc_gkey", "long"), ("arrive_pos_slot", "string", "arrive_pos_slot", "string"), 
("arrive_pos_orientation", "string", "arrive_pos_orientation", "string"), ("arrive_pos_name", "string", "arrive_pos_name", "string"), ("arrive_ops_pos_id", "string", "arrive_ops_pos_id", "string"), 
("arrive_pos_bin", "long", "arrive_pos_bin", "long"), ("arrive_pos_tier", "long", "arrive_pos_tier", "long"), ("arrive_pos_anchor", "string", "arrive_pos_anchor", "string"), 
("arrive_pos_orientation_degrees", "float", "arrive_pos_orientation_degrees", "float"), ("arrive_pos_slot_on_carriage", "string", "arrive_pos_slot_on_carriage", "string"), 
("last_pos_loctype", "string", "last_pos_loctype", "string"), ("last_pos_locid", "string", "last_pos_locid", "string"), ("last_pos_loc_gkey", "long", "last_pos_loc_gkey", "long"), 
("last_pos_slot", "string", "last_pos_slot", "string"), ("last_pos_orientation", "string", "last_pos_orientation", "string"), ("last_pos_name", "string", "last_pos_name", "string"), 
("last_ops_pos_id", "string", "last_ops_pos_id", "string"), ("last_pos_bin", "long", "last_pos_bin", "long"), ("last_pos_tier", "long", "last_pos_tier", "long"), ("last_pos_anchor", "string", "last_pos_anchor", "string"), 
("last_pos_orientation_degrees", "float", "last_pos_orientation_degrees", "float"), ("last_pos_slot_on_carriage", "string", "last_pos_slot_on_carriage", "string"), ("time_move", "string", "time_move", "timestamp"), 
("time_load", "string", "time_load", "timestamp"), ("time_rnd", "string", "time_rnd", "timestamp"), ("time_ecout", "string", "time_ecout", "timestamp"), ("time_in", "string", "time_in", "timestamp"), 
("time_out", "string", "time_out", "timestamp"), ("time_dlv_appmnt", "string", "time_dlv_appmnt", "timestamp"), ("appt_nbr", "long", "appt_nbr", "long"), ("time_inv", "string", "time_inv", "timestamp"), 
("time_complete", "string", "time_complete", "timestamp"), ("unit_gkey", "long", "unit_gkey", "long"), ("fcy_gkey", "long", "fcy_gkey", "long"), ("sequence", "long", "sequence", "long"), 
("intend_ob_cv", "long", "intend_ob_cv", "long"), ("restow_typ", "string", "restow_typ", "string"), ("hndlg_rsn", "string", "hndlg_rsn", "string"), ("yrd_stwge", "string", "yrd_stwge", "string"), 
("sparcs_stopped", "long", "sparcs_stopped", "long"), ("sparcs_note", "string", "sparcs_note", "string"), ("has_changed", "long", "has_changed", "long"), ("vrfd_load", "long", "vrfd_load", "long"), 
("vrfd_yard", "long", "vrfd_yard", "long"), ("ed_anomaly", "long", "ed_anomaly", "long"), ("actual_ib_cv", "long", "actual_ib_cv", "long"), ("actual_ob_cv", "long", "actual_ob_cv", "long"), 
("last_free_day", "string", "last_free_day", "timestamp"), ("paid_thru_day", "string", "paid_thru_day", "timestamp"), ("guarantee_thru_day", "string", "guarantee_thru_day", "timestamp"), 
("guarantee_party_gkey", "long", "guarantee_party_gkey", "long"), ("power_last_free_day", "string", "power_last_free_day", "timestamp"), ("power_paid_thru_day", "string", "power_paid_thru_day", "timestamp"), 
("power_guarantee_thru_day", "string", "power_guarantee_thru_day", "timestamp"), ("power_guarantee_party_gkey", "long", "power_guarantee_party_gkey", "long"), ("line_last_free_day", "string", "line_last_free_day", "timestamp"), 
("line_paid_thru_day", "string", "line_paid_thru_day", "timestamp"), ("line_guarantee_thru_day", "string", "line_guarantee_thru_day", "timestamp"), ("line_guarantee_party_gkey", "long", "line_guarantee_party_gkey", "long"), 
("visible_sparcs", "long", "visible_sparcs", "long"), ("flex_string01", "string", "flex_string01", "string"), ("flex_string02", "string", "flex_string02", "string"), ("flex_string03", "string", "flex_string03", "string"), 
("flex_string04", "string", "flex_string04", "string"), ("flex_string05", "string", "flex_string05", "string"), ("flex_string06", "string", "flex_string06", "string"), ("flex_string07", "string", "flex_string07", "string"), 
("flex_string08", "string", "flex_string08", "string"), ("flex_string09", "string", "flex_string09", "string"), ("flex_string10", "string", "flex_string10", "string"), ("flex_date01", "string", "flex_date01", "timestamp"), 
("flex_date02", "string", "flex_date02", "timestamp"), ("flex_date03", "string", "flex_date03", "timestamp"), ("flex_date04", "string", "flex_date04", "timestamp"), ("flex_date05", "string", "flex_date05", "timestamp"), 
("flex_date06", "string", "flex_date06", "timestamp"), ("flex_date07", "string", "flex_date07", "timestamp"), ("flex_date08", "string", "flex_date08", "timestamp"), 
("is_direct_ib_to_ob_move", "long", "is_direct_ib_to_ob_move", "long"), ("validate_marry_errors", "string", "validate_marry_errors", "string"), ("stow_factor", "string", "stow_factor", "string"), 
("return_to_yard", "long", "return_to_yard", "long"), ("move_count", "long", "move_count", "long"), ("ras_priority", "long", "ras_priority", "long"), ("housekp_cur_slot", "string", "housekp_cur_slot", "string"), 
("housekp_ftr_slot", "string", "housekp_ftr_slot", "string"), ("housekp_cur_score", "long", "housekp_cur_score", "long"), ("housekp_ftr_score", "long", "housekp_ftr_score", "long"), 
("housekp_timestamp", "string", "housekp_timestamp", "timestamp"), ("stacking_factor", "string", "stacking_factor", "string"), ("section_factor", "string", "section_factor", "string"), 
("cas_unit_reference", "string", "cas_unit_reference", "string"), ("cas_tran_reference", "string", "cas_tran_reference", "string"), ("preferred_transfer_location", "string", "preferred_transfer_location", "string"), 
("door_direction", "string", "door_direction", "string"), ("optimal_rail_tz_slot", "string", "optimal_rail_tz_slot", "string"), ("carrier_incompatible_reason", "string", "carrier_incompatible_reason", "string"), 
("rail_cone_status", "string", "rail_cone_status", "string"), ("segregation_factor", "string", "segregation_factor", "string"),("changed", "string", "changed", "timestamp"),
("has_active_alarm", "bigint", "has_active_alarm", "bigint"), ("deleted_dt", "string", "deleted_dt", "timestamp"), 
("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "invFCYV_mappingcombined")

## inv_unit_yrd_visit mapping
invYRDV_mappingcombined = ApplyMapping.apply(frame = invYRDV_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"),("gkey", "long", "gkey", "long"), ("ufv_gkey", "long", "ufv_gkey", "long"), ("yrd_gkey", "long", "yrd_gkey", "long"), ("pkey", "long", "pkey", "long"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "invYRDV_mappingcombined")

## inv_wi mapping
invWI_mappingcombined = ApplyMapping.apply(frame = invWI_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("pkey", "long", "pkey", "long"), ("facility_gkey", "long", "facility_gkey", "long"), ("uyv_gkey", "long", "uyv_gkey", "long"), ("tbdu_gkey", "long", "tbdu_gkey", "long"), ("wq_pkey", "long", "wq_pkey", "long"), ("work_queue_gkey", "long", "work_queue_gkey", "long"), ("ar_pkey", "long", "ar_pkey", "long"), ("ar_gkey", "long", "ar_gkey", "long"), ("shift_target_pkey", "long", "shift_target_pkey", "long"), ("shift_target_gkey", "long", "shift_target_gkey", "long"), ("che_id", "long", "che_id", "long"), ("che_gkey", "long", "che_gkey", "long"), ("itv_id", "long", "itv_id", "long"), ("itv_gkey", "long", "itv_gkey", "long"), ("che_work_assignment_pkey", "long", "che_work_assignment_pkey", "long"), ("che_work_assignment_gkey", "long", "che_work_assignment_gkey", "long"), ("itv_work_assignment_pkey", "long", "itv_work_assignment_pkey", "long"), ("itv_work_assignment_gkey", "long", "itv_work_assignment_gkey", "long"), ("intended_che_id", "long", "intended_che_id", "long"), ("intended_che_gkey", "long", "intended_che_gkey", "long"), ("nominated_che_gkey", "long", "nominated_che_gkey", "long"), ("move_number", "float", "move_number", "float"), ("sequence", "long", "sequence", "long"), ("crane_lane", "long", "crane_lane", "long"), ("set_aside", "long", "set_aside", "long"), ("door_direction", "string", "door_direction", "string"), ("decking_restriction", "string", "decking_restriction", "string"), ("twin_with", "string", "twin_with", "string"), ("twin_int_fetch", "long", "twin_int_fetch", "long"), ("twin_int_carry", "long", "twin_int_carry", "long"), ("twin_int_put", "long", "twin_int_put", "long"), ("ec_state_fetch", "string", "ec_state_fetch", "string"), ("ec_state_dispatch_request", "long", "ec_state_dispatch_request", "long"), ("ec_state_itv_dispatch_request", "long", "ec_state_itv_dispatch_request", "long"), ("ec_state_dispatch_b", "long", "ec_state_dispatch_b", "long"), ("ec_state_itv_dispatch_b", "long", "ec_state_itv_dispatch_b", "long"), ("suspend_state", "string", "suspend_state", "string"), ("locked", "long", "locked", "long"), ("confirmed", "long", "confirmed", "long"), ("definite", "long", "definite", "long"), ("executable", "long", "executable", "long"), ("asc_aborted", "long", "asc_aborted", "long"), ("increment_crane_lane", "long", "increment_crane_lane", "long"), ("being_rehandled", "long", "being_rehandled", "long"), ("being_deleted", "long", "being_deleted", "long"), ("should_be_sent", "long", "should_be_sent", "long"), ("sequenced_pwp", "long", "sequenced_pwp", "long"), ("host_request_priority", "long", "host_request_priority", "long"), ("skip_host_update", "long", "skip_host_update", "long"), ("move_stage", "string", "move_stage", "string"), ("conf_move_stage", "string", "conf_move_stage", "string"), ("ec_hold", "string", "ec_hold", "string"), ("eq_moves_key", "string", "eq_moves_key", "string"), ("eq_uses_key", "string", "eq_uses_key", "string"), ("move_kind", "string", "move_kind", "string"), ("carrier_loctype", "string", "carrier_loctype", "string"), ("carrier_locid", "string", "carrier_locid", "string"), ("mvhs_fetch_che_id", "long", "mvhs_fetch_che_id", "long"), ("mvhs_fetch_che_name", "string", "mvhs_fetch_che_name", "string"), ("mvhs_carry_che_id", "long", "mvhs_carry_che_id", "long"), ("mvhs_carry_che_name", "string", "mvhs_carry_che_name", "string"), ("mvhs_put_che_id", "long", "mvhs_put_che_id", "long"), ("mvhs_put_che_name", "string", "mvhs_put_che_name", "string"), ("mvhs_dist_start", "long", "mvhs_dist_start", "long"), ("mvhs_dist_carry", "long", "mvhs_dist_carry", "long"), ("mvhs_t_carry_complete", "string", "mvhs_t_carry_complete", "timestamp"), ("mvhs_t_dispatch", "string", "mvhs_t_dispatch", "timestamp"), ("mvhs_t_fetch", "string", "mvhs_t_fetch", "timestamp"), ("mvhs_t_put", "string", "mvhs_t_put", "timestamp"), ("mvhs_t_carry_fetch_ready", "string", "mvhs_t_carry_fetch_ready", "timestamp"), ("mvhs_t_carry_put_ready", "string", "mvhs_t_carry_put_ready", "timestamp"), ("mvhs_t_carry_dispatch", "string", "mvhs_t_carry_dispatch", "timestamp"), ("mvhs_t_discharge", "string", "mvhs_t_discharge", "timestamp"), ("mvhs_rehandle_count", "long", "mvhs_rehandle_count", "long"), ("mvhs_pow_pkey", "long", "mvhs_pow_pkey", "long"), ("mvhs_pool_pkey", "long", "mvhs_pool_pkey", "long"), ("mvhs_twin_fetch", "long", "mvhs_twin_fetch", "long"), ("mvhs_twin_carry", "long", "mvhs_twin_carry", "long"), ("mvhs_twin_put", "long", "mvhs_twin_put", "long"), ("mvhs_tandem_fetch", "long", "mvhs_tandem_fetch", "long"), ("mvhs_tandem_put", "long", "mvhs_tandem_put", "long"), ("mvhs_tz_arrival_time", "string", "mvhs_tz_arrival_time", "timestamp"), ("mvhs_fetch_che_distance", "long", "mvhs_fetch_che_distance", "long"), ("mvhs_carry_che_distance", "long", "mvhs_carry_che_distance", "long"), ("mvhs_put_che_distance", "long", "mvhs_put_che_distance", "long"), ("mvhs_t_fetch_dispatch", "string", "mvhs_t_fetch_dispatch", "timestamp"), ("mvhs_t_put_dispatch", "string", "mvhs_t_put_dispatch", "timestamp"), ("est_move_time", "string", "est_move_time", "timestamp"), ("t_orig_est_start", "string", "t_orig_est_start", "timestamp"), ("restow_account", "string", "restow_account", "string"), ("service_order", "string", "service_order", "string"), ("restow_reason", "string", "restow_reason", "string"), ("road_truck", "long", "road_truck", "long"), ("che_dispatch_order", "long", "che_dispatch_order", "long"), ("itv_dispatch_order", "long", "itv_dispatch_order", "long"), ("pos_loctype", "string", "pos_loctype", "string"), ("pos_locid", "string", "pos_locid", "string"), ("pos_loc_gkey", "long", "pos_loc_gkey", "long"), ("pos_slot", "string", "pos_slot", "string"), ("pos_orientation", "string", "pos_orientation", "string"), ("pos_name", "string", "pos_name", "string"), ("pos_bin", "long", "pos_bin", "long"), ("pos_tier", "long", "pos_tier", "long"), ("pos_anchor", "string", "pos_anchor", "string"), ("pos_orientation_degrees", "float", "pos_orientation_degrees", "float"), ("pos_slot_on_carriage", "string", "pos_slot_on_carriage", "string"), ("truck_visit_ref", "long", "truck_visit_ref", "long"), ("pool_level", "long", "pool_level", "long"), ("msg_ref", "long", "msg_ref", "long"), ("planner_create", "long", "planner_create", "long"), ("planner_modify", "long", "planner_modify", "long"), ("t_create", "string", "t_create", "timestamp"), ("t_modified", "string", "t_modified", "timestamp"), ("create_tool", "string", "create_tool", "string"), ("imminent_move", "long", "imminent_move", "long"), ("almost_imminent", "long", "almost_imminent", "long"), ("almost_current", "long", "almost_current", "long"), ("being_carried", "long", "being_carried", "long"), ("carry_by_straddle", "long", "carry_by_straddle", "long"), ("dispatch_hung", "long", "dispatch_hung", "long"), ("ignore_gate_hold", "long", "ignore_gate_hold", "long"), ("tv_gkey", "long", "tv_gkey", "long"), ("tran_gkey", "long", "tran_gkey", "long"), ("origin_from_qual", "string", "origin_from_qual", "string"), ("assigned_chassid", "string", "assigned_chassid", "string"), ("swappable_delivery", "long", "swappable_delivery", "long"), ("n4_specified_queue", "long", "n4_specified_queue", "long"), ("gate_transaction_sequence", "long", "gate_transaction_sequence", "long"), ("crane_lane_tier", "long", "crane_lane_tier", "long"), ("yard_move_filter", "string", "yard_move_filter", "string"), ("actual_sequence", "long", "actual_sequence", "long"), ("actual_vessel_twin_pkey", "long", "actual_vessel_twin_pkey", "long"), ("actual_vessel_twin_gkey", "long", "actual_vessel_twin_gkey", "long"), ("strict_load", "long", "strict_load", "long"), ("preferred_transfer_location", "string", "preferred_transfer_location", "string"), ("is_tandem_with_next", "long", "is_tandem_with_next", "long"), ("is_tandem_with_previous", "long", "is_tandem_with_previous", "long"), ("xps_object_version", "long", "xps_object_version", "long"), ("emt_time_horizon_min", "long", "emt_time_horizon_min", "long"), ("pair_with", "string", "pair_with", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "invWI_mappingcombined")

## inv_wi_tracking mapping
#invWIT_mappingcombined = ApplyMapping.apply(frame = invWIT_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("wi_tracking_id", "long", "wi_tracking_id", "long"), ("date_added", "string", "date_added", "timestamp"), ("gkey", "long", "gkey", "long"), ("pkey", "long", "pkey", "long"), ("facility_gkey", "long", "facility_gkey", "long"), ("uyv_gkey", "long", "uyv_gkey", "long"), ("tbdu_gkey", "long", "tbdu_gkey", "long"), ("wq_pkey", "long", "wq_pkey", "long"), ("work_queue_gkey", "long", "work_queue_gkey", "long"), ("ar_pkey", "long", "ar_pkey", "long"), ("ar_gkey", "long", "ar_gkey", "long"), ("shift_target_pkey", "long", "shift_target_pkey", "long"), ("shift_target_gkey", "long", "shift_target_gkey", "long"), ("che_id", "long", "che_id", "long"), ("che_gkey", "long", "che_gkey", "long"), ("itv_id", "long", "itv_id", "long"), ("itv_gkey", "long", "itv_gkey", "long"), ("che_work_assignment_pkey", "long", "che_work_assignment_pkey", "long"), ("che_work_assignment_gkey", "long", "che_work_assignment_gkey", "long"), ("itv_work_assignment_pkey", "long", "itv_work_assignment_pkey", "long"), ("itv_work_assignment_gkey", "long", "itv_work_assignment_gkey", "long"), ("intended_che_id", "long", "intended_che_id", "long"), ("intended_che_gkey", "long", "intended_che_gkey", "long"), ("nominated_che_gkey", "long", "nominated_che_gkey", "long"), ("move_number", "float", "move_number", "float"), ("sequence", "long", "sequence", "long"), ("crane_lane", "long", "crane_lane", "long"), ("set_aside", "long", "set_aside", "long"), ("door_direction", "string", "door_direction", "string"), ("decking_restriction", "string", "decking_restriction", "string"), ("twin_with", "string", "twin_with", "string"), ("twin_int_fetch", "long", "twin_int_fetch", "long"), ("twin_int_carry", "long", "twin_int_carry", "long"), ("twin_int_put", "long", "twin_int_put", "long"), ("ec_state_fetch", "string", "ec_state_fetch", "string"), ("ec_state_dispatch_request", "long", "ec_state_dispatch_request", "long"), ("ec_state_itv_dispatch_request", "long", "ec_state_itv_dispatch_request", "long"), ("ec_state_dispatch_b", "long", "ec_state_dispatch_b", "long"), ("ec_state_itv_dispatch_b", "long", "ec_state_itv_dispatch_b", "long"), ("suspend_state", "string", "suspend_state", "string"), ("locked", "long", "locked", "long"), ("confirmed", "long", "confirmed", "long"), ("definite", "long", "definite", "long"), ("executable", "long", "executable", "long"), ("asc_aborted", "long", "asc_aborted", "long"), ("increment_crane_lane", "long", "increment_crane_lane", "long"), ("being_rehandled", "long", "being_rehandled", "long"), ("being_deleted", "long", "being_deleted", "long"), ("should_be_sent", "long", "should_be_sent", "long"), ("sequenced_pwp", "long", "sequenced_pwp", "long"), ("host_request_priority", "long", "host_request_priority", "long"), ("skip_host_update", "long", "skip_host_update", "long"), ("move_stage", "string", "move_stage", "string"), ("conf_move_stage", "string", "conf_move_stage", "string"), ("ec_hold", "string", "ec_hold", "string"), ("eq_moves_key", "string", "eq_moves_key", "string"), ("eq_uses_key", "string", "eq_uses_key", "string"), ("move_kind", "string", "move_kind", "string"), ("carrier_loctype", "string", "carrier_loctype", "string"), ("carrier_locid", "string", "carrier_locid", "string"), ("mvhs_fetch_che_id", "long", "mvhs_fetch_che_id", "long"), ("mvhs_fetch_che_name", "string", "mvhs_fetch_che_name", "string"), ("mvhs_carry_che_id", "long", "mvhs_carry_che_id", "long"), ("mvhs_carry_che_name", "string", "mvhs_carry_che_name", "string"), ("mvhs_put_che_id", "long", "mvhs_put_che_id", "long"), ("mvhs_put_che_name", "string", "mvhs_put_che_name", "string"), ("mvhs_dist_start", "long", "mvhs_dist_start", "long"), ("mvhs_dist_carry", "long", "mvhs_dist_carry", "long"), ("mvhs_t_carry_complete", "string", "mvhs_t_carry_complete", "timestamp"), ("mvhs_t_dispatch", "string", "mvhs_t_dispatch", "timestamp"), ("mvhs_t_fetch", "string", "mvhs_t_fetch", "timestamp"), ("mvhs_t_put", "string", "mvhs_t_put", "timestamp"), ("mvhs_t_carry_fetch_ready", "string", "mvhs_t_carry_fetch_ready", "timestamp"), ("mvhs_t_carry_put_ready", "string", "mvhs_t_carry_put_ready", "timestamp"), ("mvhs_t_carry_dispatch", "string", "mvhs_t_carry_dispatch", "timestamp"), ("mvhs_t_discharge", "string", "mvhs_t_discharge", "timestamp"), ("mvhs_rehandle_count", "long", "mvhs_rehandle_count", "long"), ("mvhs_pow_pkey", "long", "mvhs_pow_pkey", "long"), ("mvhs_pool_pkey", "long", "mvhs_pool_pkey", "long"), ("mvhs_twin_fetch", "long", "mvhs_twin_fetch", "long"), ("mvhs_twin_carry", "long", "mvhs_twin_carry", "long"), ("mvhs_twin_put", "long", "mvhs_twin_put", "long"), ("mvhs_tandem_fetch", "long", "mvhs_tandem_fetch", "long"), ("mvhs_tandem_put", "long", "mvhs_tandem_put", "long"), ("mvhs_tz_arrival_time", "string", "mvhs_tz_arrival_time", "timestamp"), ("mvhs_fetch_che_distance", "long", "mvhs_fetch_che_distance", "long"), ("mvhs_carry_che_distance", "long", "mvhs_carry_che_distance", "long"), ("mvhs_put_che_distance", "long", "mvhs_put_che_distance", "long"), ("mvhs_t_fetch_dispatch", "string", "mvhs_t_fetch_dispatch", "timestamp"), ("mvhs_t_put_dispatch", "string", "mvhs_t_put_dispatch", "timestamp"), ("est_move_time", "string", "est_move_time", "timestamp"), ("t_orig_est_start", "string", "t_orig_est_start", "timestamp"), ("restow_account", "string", "restow_account", "string"), ("service_order", "string", "service_order", "string"), ("restow_reason", "string", "restow_reason", "string"), ("road_truck", "long", "road_truck", "long"), ("che_dispatch_order", "long", "che_dispatch_order", "long"), ("itv_dispatch_order", "long", "itv_dispatch_order", "long"), ("pos_loctype", "string", "pos_loctype", "string"), ("pos_locid", "string", "pos_locid", "string"), ("pos_loc_gkey", "long", "pos_loc_gkey", "long"), ("pos_slot", "string", "pos_slot", "string"), ("pos_orientation", "string", "pos_orientation", "string"), ("pos_name", "string", "pos_name", "string"), ("pos_bin", "long", "pos_bin", "long"), ("pos_tier", "long", "pos_tier", "long"), ("pos_anchor", "string", "pos_anchor", "string"), ("pos_orientation_degrees", "float", "pos_orientation_degrees", "float"), ("pos_slot_on_carriage", "string", "pos_slot_on_carriage", "string"), ("truck_visit_ref", "long", "truck_visit_ref", "long"), ("pool_level", "long", "pool_level", "long"), ("msg_ref", "long", "msg_ref", "long"), ("planner_create", "long", "planner_create", "long"), ("planner_modify", "long", "planner_modify", "long"), ("t_create", "string", "t_create", "timestamp"), ("t_modified", "string", "t_modified", "timestamp"), ("create_tool", "string", "create_tool", "string"), ("imminent_move", "long", "imminent_move", "long"), ("almost_imminent", "long", "almost_imminent", "long"), ("almost_current", "long", "almost_current", "long"), ("being_carried", "long", "being_carried", "long"), ("carry_by_straddle", "long", "carry_by_straddle", "long"), ("dispatch_hung", "long", "dispatch_hung", "long"), ("ignore_gate_hold", "long", "ignore_gate_hold", "long"), ("tv_gkey", "long", "tv_gkey", "long"), ("tran_gkey", "long", "tran_gkey", "long"), ("origin_from_qual", "string", "origin_from_qual", "string"), ("assigned_chassid", "string", "assigned_chassid", "string"), ("swappable_delivery", "long", "swappable_delivery", "long"), ("n4_specified_queue", "long", "n4_specified_queue", "long"), ("gate_transaction_sequence", "long", "gate_transaction_sequence", "long"), ("crane_lane_tier", "long", "crane_lane_tier", "long"), ("yard_move_filter", "string", "yard_move_filter", "string"), ("actual_sequence", "long", "actual_sequence", "long"), ("actual_vessel_twin_pkey", "long", "actual_vessel_twin_pkey", "long"), ("actual_vessel_twin_gkey", "long", "actual_vessel_twin_gkey", "long"), ("strict_load", "long", "strict_load", "long"), ("preferred_transfer_location", "string", "preferred_transfer_location", "string"), ("is_tandem_with_next", "long", "is_tandem_with_next", "long"), ("is_tandem_with_previous", "long", "is_tandem_with_previous", "long"), ("xps_object_version", "long", "xps_object_version", "long"), ("emt_time_horizon_min", "long", "emt_time_horizon_min", "long"), ("pair_with", "string", "pair_with", "string"), ("has_active_alarm", "bigint", "has_active_alarm", "bigint"),("bim_swappable", "bigint", "bim_swappable", "bigint"),("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "invWIT_mappingcombined")

## inv_wq mapping
invWQ_mappingcombined = ApplyMapping.apply(frame = invWQ_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("pkey", "long", "pkey", "long"), ("pow_pkey", "long", "pow_pkey", "long"), ("pow_gkey", "long", "pow_gkey", "long"), ("yrd_gkey", "long", "yrd_gkey", "long"), ("cycle_companion_pkey", "long", "cycle_companion_pkey", "long"), ("cycle_companion_gkey", "long", "cycle_companion_gkey", "long"), ("first_shift_pkey", "long", "first_shift_pkey", "long"), ("first_shift_gkey", "long", "first_shift_gkey", "long"), ("qorder", "float", "qorder", "float"), ("qtype", "string", "qtype", "string"), ("qfission", "long", "qfission", "long"), ("wis_sent_tls", "long", "wis_sent_tls", "long"), ("save_completed_moves", "long", "save_completed_moves", "long"), ("is_blue", "long", "is_blue", "long"), ("permanent", "long", "permanent", "long"), ("service_order_queue", "long", "service_order_queue", "long"), ("manual_sequence_mode", "long", "manual_sequence_mode", "long"), ("yard_loadback_queue", "long", "yard_loadback_queue", "long"), ("allow_40", "long", "allow_40", "long"), ("allow_20", "long", "allow_20", "long"), ("pos_loctype", "string", "pos_loctype", "string"), ("pos_locid", "string", "pos_locid", "string"), ("qcode", "string", "qcode", "string"), ("qdeck", "string", "qdeck", "string"), ("qrow", "string", "qrow", "string"), ("name", "string", "name", "string"), ("t_delete_ready", "string", "t_delete_ready", "timestamp"), ("doublecycle_from_sequence", "long", "doublecycle_from_sequence", "long"), ("doublecycle_to_sequence", "long", "doublecycle_to_sequence", "long"), ("note", "string", "note", "string"), ("computed_20_projection", "long", "computed_20_projection", "long"), ("computed_40_projection", "long", "computed_40_projection", "long"), ("vessel_lcg", "long", "vessel_lcg", "long"), ("use_wq_prod", "long", "use_wq_prod", "long"), ("productivity_std", "long", "productivity_std", "long"), ("productivity_dual", "long", "productivity_dual", "long"), ("productivity_twin", "long", "productivity_twin", "long"), ("max_teu_cap", "long", "max_teu_cap", "long"), ("pct_cap_start_prty", "long", "pct_cap_start_prty", "long"), ("pnlty_exceed_cap", "long", "pnlty_exceed_cap", "long"), ("tls_sort_key", "long", "tls_sort_key", "long"), ("productivity_tandem", "long", "productivity_tandem", "long"), ("productivity_quad", "long", "productivity_quad", "long"), ("berth_call_slave_id", "long", "berth_call_slave_id", "long"), ("t_last_activation_chg", "string", "t_last_activation_chg", "timestamp"),("planned_di_count", "bigint", "planned_di_count", "bigint"),("underway_di_count", "bigint", "underway_di_count", "bigint"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "invWQ_mappingcombined")

## mns_che_move_statistics mapping
mnsCMS_mappingcombined = ApplyMapping.apply(frame = mnsCMS_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("che_trip_gkey", "long", "che_trip_gkey", "long"), ("che_session_period_gkey", "long", "che_session_period_gkey", "long"), ("move_event_gkey", "long", "move_event_gkey", "long"), ("move_gkey", "long", "move_gkey", "long"), ("carrier_gkey", "long", "carrier_gkey", "long"), ("declrd_ib_cv_gkey", "long", "declrd_ib_cv_gkey", "long"), ("declrd_ob_cv_gkey", "long", "declrd_ob_cv_gkey", "long"), ("che_qc", "long", "che_qc", "long"), ("unit_id", "string", "unit_id", "string"), ("category", "string", "category", "string"), ("freight_kind", "string", "freight_kind", "string"), ("is_live_reefer", "long", "is_live_reefer", "long"), ("basic_length", "string", "basic_length", "string"), ("eq_type_iso", "string", "eq_type_iso", "string"), ("nominal_length", "string", "nominal_length", "string"), ("work_queue", "string", "work_queue", "string"), ("pow", "string", "pow", "string"), ("pool", "string", "pool", "string"), ("fm_pos_loctype", "string", "fm_pos_loctype", "string"), ("fm_pos_locid", "string", "fm_pos_locid", "string"), ("fm_pos_loc_gkey", "long", "fm_pos_loc_gkey", "long"), ("fm_pos_slot", "string", "fm_pos_slot", "string"), ("fm_pos_orientation", "string", "fm_pos_orientation", "string"), ("fm_pos_name", "string", "fm_pos_name", "string"), ("fm_pos_bin", "long", "fm_pos_bin", "long"), ("fm_pos_tier", "long", "fm_pos_tier", "long"), ("fm_pos_orientation_degrees", "float", "fm_pos_orientation_degrees", "float"), ("fm_pos_slot_on_carriage", "string", "fm_pos_slot_on_carriage", "string"), ("to_pos_loctype", "string", "to_pos_loctype", "string"), ("to_pos_locid", "string", "to_pos_locid", "string"), ("to_pos_loc_gkey", "long", "to_pos_loc_gkey", "long"), ("to_pos_slot", "string", "to_pos_slot", "string"), ("to_pos_orientation", "string", "to_pos_orientation", "string"), ("to_pos_name", "string", "to_pos_name", "string"), ("to_pos_bin", "long", "to_pos_bin", "long"), ("to_pos_tier", "long", "to_pos_tier", "long"), ("to_pos_orientation_degrees", "float", "to_pos_orientation_degrees", "float"), ("to_pos_slot_on_carriage", "string", "to_pos_slot_on_carriage", "string"), ("t_pick_dispatch", "string", "t_pick_dispatch", "timestamp"), ("t_pick_arrive", "string", "t_pick_arrive", "timestamp"), ("t_lift_dispatch", "string", "t_lift_dispatch", "timestamp"), ("t_cntr_on", "string", "t_cntr_on", "timestamp"), ("t_drop_dispatch", "string", "t_drop_dispatch", "timestamp"), ("t_drop_arrive", "string", "t_drop_arrive", "timestamp"), ("t_cntr_off", "string", "t_cntr_off", "timestamp"), ("pick_idle_time", "long", "pick_idle_time", "long"), ("pick_wait_time", "long", "pick_wait_time", "long"), ("drop_idle_time", "long", "drop_idle_time", "long"), ("drop_wait_time", "long", "drop_wait_time", "long"), ("rehandle_count", "long", "rehandle_count", "long"), ("twin_move", "long", "twin_move", "long"), ("lane_change", "long", "lane_change", "long"), ("pick_distance", "long", "pick_distance", "long"), ("drop_distance", "long", "drop_distance", "long"), ("move_direction", "string", "move_direction", "string"), ("move_category", "string", "move_category", "string"), ("from_block", "long", "from_block", "long"), ("from_block_type", "string", "from_block_type", "string"), ("to_block", "long", "to_block", "long"), ("to_block_type", "string", "to_block_type", "string"), ("wait_time_qc", "long", "wait_time_qc", "long"), ("wait_time_block", "long", "wait_time_block", "long"), ("move_purpose", "string", "move_purpose", "string"), ("is_tandem", "long", "is_tandem", "long"), ("is_quad", "long", "is_quad", "long"), ("spreader_id", "string", "spreader_id", "string"), ("cycle_time", "long", "cycle_time", "long"), ("t_buffer_enter", "string", "t_buffer_enter", "timestamp"), ("t_buffer_exit", "string", "t_buffer_exit", "timestamp"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "mnsCMS_mappingcombined")

## mns_che_operator_statistics mapping
mnsCOS_mappingcombined = ApplyMapping.apply(frame = mnsCOS_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("che_operator", "long", "che_operator", "long"), ("che", "long", "che", "long"), ("che_op_action", "string", "che_op_action", "string"), ("t_action_time", "string", "t_action_time", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "mnsCOS_mappingcombined")

## mns_che_session mapping
mnsCSE_mappingcombined = ApplyMapping.apply(frame = mnsCSE_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("che_operator", "long", "che_operator", "long"), ("che", "long", "che", "long"), ("t_login", "string", "t_login", "timestamp"), ("t_logout", "string", "t_logout", "timestamp"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "mnsCSE_mappingcombined")

## mns_che_session_period mapping
mnsCSP_mappingcombined = ApplyMapping.apply(frame = mnsCSP_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("che_session_gkey", "long", "che_session_gkey", "long"), ("t_start", "string", "t_start", "timestamp"), ("t_end", "string", "t_end", "timestamp"), ("duration", "long", "duration", "long"), ("csp_period_type", "string", "csp_period_type", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "mnsCSP_mappingcombined")

## mns_che_status mapping
mnsCST_mappingcombined = ApplyMapping.apply(frame = mnsCST_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("che", "long", "che", "long"), ("che_name", "string", "che_name", "string"), ("start_time", "string", "start_time", "timestamp"), ("end_time", "string", "end_time", "timestamp"), ("duration", "long", "duration", "long"), ("status", "string", "status", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "mnsCST_mappingcombined")

## mns_che_trip_statistics mapping
mnsCTS_mappingcombined = ApplyMapping.apply(frame = mnsCTS_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("yard_gkey", "long", "yard_gkey", "long"), ("id", "string", "id", "string"), ("che", "long", "che", "long"), ("che_type", "long", "che_type", "long"), ("move_kind", "string", "move_kind", "string"), ("che_phase", "string", "che_phase", "string"), ("che_operator", "long", "che_operator", "long"), ("dist_laden", "long", "dist_laden", "long"), ("dist_unladen", "long", "dist_unladen", "long"), ("t_first_cntr_on", "string", "t_first_cntr_on", "timestamp"), ("t_last_cntr_off", "string", "t_last_cntr_off", "timestamp"), ("t_first_dispatch", "string", "t_first_dispatch", "timestamp"), ("t_unladen_travel", "long", "t_unladen_travel", "long"), ("t_laden_travel", "long", "t_laden_travel", "long"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "mnsCTS_mappingcombined")

## xps_che mapping
xpsCHE_mappingcombined = ApplyMapping.apply(frame = xpsCHE_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("yard", "long", "yard", "long"), ("life_cycle_state", "string", "life_cycle_state", "string"), ("pkey", "long", "pkey", "long"), ("pool", "long", "pool", "long"), ("pool_gkey", "long", "pool_gkey", "long"), ("pow", "long", "pow", "long"), ("point_of_work_gkey", "long", "point_of_work_gkey", "long"), ("vessel_code", "string", "vessel_code", "string"), ("status", "long", "status", "long"), ("status_enum", "string", "status_enum", "string"), ("talk_status", "long", "talk_status", "long"), ("talk_status_enum", "string", "talk_status_enum", "string"), ("message_status", "long", "message_status", "long"), ("message_status_enum", "string", "message_status_enum", "string"), ("mts_status", "long", "mts_status", "long"), ("itt_dispatch_mode", "long", "itt_dispatch_mode", "long"), ("last_time", "string", "last_time", "timestamp"), ("time_complete_last_job", "string", "time_complete_last_job", "timestamp"), ("time_log_in_out", "string", "time_log_in_out", "timestamp"), ("time_available_unavailable", "string", "time_available_unavailable", "timestamp"), ("time_out_of_service", "string", "time_out_of_service", "timestamp"), ("time_lift", "string", "time_lift", "timestamp"), ("time_finish", "string", "time_finish", "timestamp"), ("time_dispatch", "string", "time_dispatch", "timestamp"), ("job_distance", "long", "job_distance", "long"), ("to_job_distance", "long", "to_job_distance", "long"), ("laden_travel", "long", "laden_travel", "long"), ("empty_travel", "long", "empty_travel", "long"), ("terminal", "string", "terminal", "string"), ("planned_terminal", "string", "planned_terminal", "string"), ("mts_platform_size", "long", "mts_platform_size", "long"), ("last_position", "string", "last_position", "string"), ("last_put", "string", "last_put", "string"), ("plan_position", "string", "plan_position", "string"), ("range_sel_block", "string", "range_sel_block", "string"), ("range_first_row", "long", "range_first_row", "long"), ("range_last_row", "long", "range_last_row", "long"), ("range_first_column", "long", "range_first_column", "long"), ("range_last_column", "long", "range_last_column", "long"), ("login_name", "string", "login_name", "string"), ("allowed_boxes", "long", "allowed_boxes", "long"), ("current_position_section_index", "long", "current_position_section_index", "long"), ("last_position_section_index", "long", "last_position_section_index", "long"), ("nom_chassis_section_idx", "long", "nom_chassis_section_idx", "long"), ("assigned_che", "long", "assigned_che", "long"), ("assigned_che_gkey", "long", "assigned_che_gkey", "long"), ("qualifiers", "string", "qualifiers", "string"), ("alternative_radio_id", "long", "alternative_radio_id", "long"), ("default_ec_communicator", "long", "default_ec_communicator", "long"), ("current_ec_communicator", "long", "current_ec_communicator", "long"), ("maximum_weight", "long", "maximum_weight", "long"), ("full_name", "string", "full_name", "string"), ("last_wi_reference", "long", "last_wi_reference", "long"), ("short_name", "string", "short_name", "string"), ("default_program", "string", "default_program", "string"), ("kind", "long", "kind", "long"), ("kind_enum", "string", "kind_enum", "string"), ("operating_mode", "long", "operating_mode", "long"), ("operating_mode_enum", "string", "operating_mode_enum", "string"), ("has_mdt", "long", "has_mdt", "long"), ("maximum_height", "long", "maximum_height", "long"), ("icon", "long", "icon", "long"), ("id", "long", "id", "long"), ("screen_type", "long", "screen_type", "long"), ("screen_horizontal", "long", "screen_horizontal", "long"), ("screen_vertical", "long", "screen_vertical", "long"), ("in_program", "long", "in_program", "long"), ("num_function_keys", "long", "num_function_keys", "long"), ("job_step_state", "long", "job_step_state", "long"), ("job_step_state_enum", "string", "job_step_state_enum", "string"), ("job_step_complete_time", "string", "job_step_complete_time", "timestamp"), ("last_jobstep_transition", "string", "last_jobstep_transition", "timestamp"), ("currently_toggled_wi_ref", "long", "currently_toggled_wi_ref", "long"), ("accept_job_done_press_time", "string", "accept_job_done_press_time", "timestamp"), ("extended_address", "string", "extended_address", "string"), ("maximum_teu", "long", "maximum_teu", "long"), ("is_in_job_step_mode", "long", "is_in_job_step_mode", "long"), ("clerk_pow_reference", "long", "clerk_pow_reference", "long"), ("clerk_vessel_code", "string", "clerk_vessel_code", "string"), ("clerk_container_key", "long", "clerk_container_key", "long"), ("clerk_last_landed_che", "long", "clerk_last_landed_che", "long"), ("clerk_last_landed_che_gkey", "long", "clerk_last_landed_che_gkey", "long"), ("clerk_teu_landed", "long", "clerk_teu_landed", "long"), ("trailer", "long", "trailer", "long"), ("assist_state", "long", "assist_state", "long"), ("assist_state_enum", "string", "assist_state_enum", "string"), ("scale_on", "long", "scale_on", "long"), ("in_comms_fail", "long", "in_comms_fail", "long"), ("chassis_fetch_req", "long", "chassis_fetch_req", "long"), ("no_login_required", "long", "no_login_required", "long"), ("automation_active", "long", "automation_active", "long"), ("dispatch_requested", "long", "dispatch_requested", "long"), ("manual_dispatch", "long", "manual_dispatch", "long"), ("sends_pds_weight", "long", "sends_pds_weight", "long"), ("suspend_auto_dispatch", "long", "suspend_auto_dispatch", "long"), ("twin_carry_capable", "long", "twin_carry_capable", "long"), ("manual_dispatch_pending", "long", "manual_dispatch_pending", "long"), ("has_overheight_gear", "long", "has_overheight_gear", "long"), ("first_lift_took_place", "long", "first_lift_took_place", "long"), ("twin_lift_capable", "long", "twin_lift_capable", "long"), ("mts_damaged", "long", "mts_damaged", "long"), ("uses_pds", "long", "uses_pds", "long"), ("configurable_trailer", "long", "configurable_trailer", "long"), ("nominal_length20_capable", "long", "nominal_length20_capable", "long"), ("nominal_length40_capable", "long", "nominal_length40_capable", "long"), ("nominal_length45_capable", "long", "nominal_length45_capable", "long"), ("nominal_length24_capable", "long", "nominal_length24_capable", "long"), ("nominal_length48_capable", "long", "nominal_length48_capable", "long"), ("nominal_length53_capable", "long", "nominal_length53_capable", "long"), ("nominal_length30_capable", "long", "nominal_length30_capable", "long"), ("nominal_length60_capable", "long", "nominal_length60_capable", "long"), ("autoche_technical_status", "string", "autoche_technical_status", "string"), ("autoche_operational_status", "string", "autoche_operational_status", "string"), ("autoche_work_status", "string", "autoche_work_status", "string"), ("twin_diff_wgt_allowance", "long", "twin_diff_wgt_allowance", "long"), ("scale_weight_unit", "long", "scale_weight_unit", "long"), ("rel_queue_pos_for", "float", "rel_queue_pos_for", "float"), ("waiting_for_truck_insert", "long", "waiting_for_truck_insert", "long"), ("attached_chassis_id", "string", "attached_chassis_id", "string"), ("tandem_lift_capable", "long", "tandem_lift_capable", "long"), ("max_tandem_weight", "long", "max_tandem_weight", "long"), ("proximity_radius", "long", "proximity_radius", "long"), ("quad_lift_capable", "long", "quad_lift_capable", "long"), ("max_quad_weight", "long", "max_quad_weight", "long"), ("dispatch_info", "string", "dispatch_info", "string"), ("che_lane", "long", "che_lane", "long"), ("has_trailer", "long", "has_trailer", "long"), ("work_load", "long", "work_load", "long"), ("autoche_running_hours", "long", "autoche_running_hours", "long"), ("che_energy_level", "long", "che_energy_level", "long"), ("che_energy_state_enum", "string", "che_energy_state_enum", "string"), ("lift_capacity", "long", "lift_capacity", "long"), ("maximum_weight_in_kg", "float", "maximum_weight_in_kg", "float"), ("max_quad_weight_in_kg", "float", "max_quad_weight_in_kg", "float"), ("max_tandem_weight_in_kg", "float", "max_tandem_weight_in_kg", "float"), ("lift_capacity_in_kg", "float", "lift_capacity_in_kg", "float"), ("lift_operational_status", "string", "lift_operational_status", "string"), ("twin_diff_wgt_allowance_in_kg", "float", "twin_diff_wgt_allowance_in_kg", "float"), ("ocr_mode_switch", "long", "ocr_mode_switch", "long"), ("ec_state_flex_string_1", "string", "ec_state_flex_string_1", "string"), ("ec_state_flex_string_2", "string", "ec_state_flex_string_2", "string"), ("ec_state_flex_string_3", "string", "ec_state_flex_string_3", "string"), ("allowed_chassis_kinds", "long", "allowed_chassis_kinds", "long"), ("is_charging", "bigint", "is_charging", "bigint"), ("has_active_alarm", "bigint", "has_active_alarm", "bigint"),("last_pos_loctype", "string", "last_pos_loctype", "string"), ("last_pos_locid", "string", "last_pos_locid", "string"), ("last_pos_loc_gkey", "long", "last_pos_loc_gkey", "long"), ("last_pos_slot", "string", "last_pos_slot", "string"), ("last_pos_orientation", "string", "last_pos_orientation", "string"), ("last_pos_name", "string", "last_pos_name", "string"), ("last_pos_bin", "long", "last_pos_bin", "long"), ("last_pos_tier", "long", "last_pos_tier", "long"), ("last_pos_anchor", "string", "last_pos_anchor", "string"), ("last_pos_orientation_degrees", "float", "last_pos_orientation_degrees", "float"), ("last_ops_pos_id", "string", "last_ops_pos_id", "string"), ("last_pos_slot_on_carriage", "string", "last_pos_slot_on_carriage", "string"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "xpsCHE_mappingcombined")

## xps_ecevent mapping
xpsECE_mappingcombined = ApplyMapping.apply(frame = xpsECE_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("yard", "long", "yard", "long"), ("pkey", "long", "pkey", "long"), ("timestamp", "string", "timestamp", "timestamp"), ("type", "long", "type", "long"), ("che_id", "long", "che_id", "long"), ("che_name", "string", "che_name", "string"), ("operator_name", "string", "operator_name", "string"), ("sub_type", "long", "sub_type", "long"), ("type_description", "string", "type_description", "string"), ("from_che_id_name", "long", "from_che_id_name", "long"), ("to_che_id_name", "long", "to_che_id_name", "long"), ("unit_id_name", "string", "unit_id_name", "string"), ("pow_name", "string", "pow_name", "string"), ("pool_name", "string", "pool_name", "string"), ("work_queue", "string", "work_queue", "string"), ("travel_distance", "long", "travel_distance", "long"), ("move_kind", "string", "move_kind", "string"), ("is_twin_move", "long", "is_twin_move", "long"), ("start_distance", "long", "start_distance", "long"), ("work_assignment_gkey", "long", "work_assignment_gkey", "long"), ("work_assignment_id", "string", "work_assignment_id", "string"), ("unit_reference", "string", "unit_reference", "string"), ("tran_id", "string", "tran_id", "string"), ("loctype", "string", "loctype", "string"), ("locid", "string", "locid", "string"), ("loc_slot", "string", "loc_slot", "string"), ("ops_pos_id", "string", "ops_pos_id", "string"), ("unladen_loctype", "string", "unladen_loctype", "string"), ("unladen_locid", "string", "unladen_locid", "string"), ("unladen_loc_slot", "string", "unladen_loc_slot", "string"), ("laden_loctype", "string", "laden_loctype", "string"), ("laden_locid", "string", "laden_locid", "string"), ("laden_loc_slot", "string", "laden_loc_slot", "string"), ("last_est_move_time", "string", "last_est_move_time", "timestamp"), ("deleted_dt", "string", "deleted_dt", "timestamp"), ("is_deleted", "boolean", "is_deleted", "boolean")], transformation_ctx = "xpsECE_mappingcombined")

## xps_ecuser mapping
xpsECU_mappingcombined = ApplyMapping.apply(frame = xpsECU_dynDF, mappings = [("sourcesystem", "string", "sourcesystem", "string"), ("dboperationtype", "string", "dboperationtype", "string"),("audtdateadded", "string", "audtdateadded", "timestamp"), ("gkey", "long", "gkey", "long"), ("yard", "long", "yard", "long"), ("pkey", "long", "pkey", "long"), ("name", "string", "name", "string"), ("user_id", "string", "user_id", "string"), ("password", "string", "password", "string")], transformation_ctx = "xpsECU_mappingcombined")

                                        ####################################
                                        ####        DATASINK BLOCK      ####
                                        ####################################

## inv_storage_rule datasink
storrul_datasink = glueContext.write_dynamic_frame.from_options(frame = storrul_applymapping, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/inv_storage_rule"}, format = "parquet", transformation_ctx = "storrul_datasink")
										
## inv_goods datasink
invG_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = invG_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/inv_goods"}, format = "parquet", transformation_ctx = "invG_datasinkcombined")

## inv_move_event datasink
invME_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = invME_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/inv_move_event"}, format = "parquet", transformation_ctx = "invME_datasinkcombined")

## inv_unit datasink
invU_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = invU_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/inv_unit"}, format = "parquet", transformation_ctx = "invU_datasinkcombined")

## inv_unit_fcy_visit datasink
invFCYV_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = invFCYV_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/inv_unit_fcy_visit"}, format = "parquet", transformation_ctx = "invFCYV_datasinkcombined")

## inv_unit_yrd_visit datasink
invYRDV_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = invYRDV_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/inv_unit_yrd_visit"}, format = "parquet", transformation_ctx = "invYRDV_datasinkcombined")

## inv_wi datasink
invWI_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = invWI_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/inv_wi"}, format = "parquet", transformation_ctx = "invWI_datasinkcombined")

## inv_wi_tracking datasink
invWIT_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = invWIT_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/inv_wi_tracking"}, format = "parquet", transformation_ctx = "invWIT_datasinkcombined")

## inv_wq datasink
invWQ_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = invWQ_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/inv_wq"}, format = "parquet", transformation_ctx = "invWQ_datasinkcombined")

## mns_che_move_statistics datasink
mnsCMS_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = mnsCMS_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/mns_che_move_statistics"}, format = "parquet", transformation_ctx = "mnsCMS_datasinkcombined")

## mns_che_operator_statistics datasink
mnsCOS_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = mnsCOS_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/mns_che_operator_statistics"}, format = "parquet", transformation_ctx = "mnsCOS_datasinkcombined")

## mns_che_session datasink
mnsCSE_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = mnsCSE_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/mns_che_session"}, format = "parquet", transformation_ctx = "mnsCSE_datasinkcombined")

## mns_che_session_period datasink
mnsCSP_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = mnsCSP_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/mns_che_session_period"}, format = "parquet", transformation_ctx = "mnsCSP_datasinkcombined")

## mns_che_status datasink
mnsCST_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = mnsCST_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/mns_che_status"}, format = "parquet", transformation_ctx = "mnsCST_datasinkcombined")

## mns_che_trip_statistics datasink
mnsCTS_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = mnsCTS_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/mns_che_trip_statistics"}, format = "parquet", transformation_ctx = "mnsCTS_datasinkcombined")

## xps_che datasink
xpsCHE_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = xpsCHE_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/xps_che"}, format = "parquet", transformation_ctx = "xpsCHE_datasinkcombined")

## xps_ecevent datasink
xpsECE_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = xpsECE_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/xps_ecevent"}, format = "parquet", transformation_ctx = "xpsECE_datasinkcombined")

## xps_ecuser datasink
xpsECU_datasinkcombined = glueContext.write_dynamic_frame.from_options(frame = xpsECU_mappingcombined, connection_type = "s3", connection_options = {"path": "s3://pa-dms-staging/n4/nola/combined/xps_ecuser"}, format = "parquet", transformation_ctx = "xpsECU_datasinkcombined")



job.commit()